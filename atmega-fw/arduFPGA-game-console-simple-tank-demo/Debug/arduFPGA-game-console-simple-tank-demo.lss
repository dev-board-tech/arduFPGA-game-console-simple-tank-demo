
arduFPGA-game-console-simple-tank-demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000dd4  00000e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000046f  0080010a  0080010a  00000e72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003822  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000160b  00000000  00000000  0000497e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b4d  00000000  00000000  00005f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e8  00000000  00000000  00007ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000103c  00000000  00000000  000081c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002db4  00000000  00000000  000091fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 ed       	ldi	r30, 0xD4	; 212
  c0:	fd e0       	ldi	r31, 0x0D	; 13
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 30       	cpi	r26, 0x0A	; 10
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	25 e0       	ldi	r18, 0x05	; 5
  d0:	aa e0       	ldi	r26, 0x0A	; 10
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a9 37       	cpi	r26, 0x79	; 121
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	3d d3       	rcall	.+1658   	; 0x75a <main>
  e0:	77 c6       	rjmp	.+3310   	; 0xdd0 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <delay_ms>:
void delay_s(uint16_t s) {
	volatile int32_t s_ = (s * (F_CPU / 37)) - 50;
	if(s_ < 0)
		return;
	while(s_--);
}
  e4:	a4 e0       	ldi	r26, 0x04	; 4
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e7 e7       	ldi	r30, 0x77	; 119
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	08 c5       	rjmp	.+2576   	; 0xafe <__prologue_saves__+0x20>
  ee:	9c 01       	movw	r18, r24
  f0:	a0 eb       	ldi	r26, 0xB0	; 176
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	e5 d4       	rcall	.+2506   	; 0xac0 <__umulhisi3>
  f6:	dc 01       	movw	r26, r24
  f8:	cb 01       	movw	r24, r22
  fa:	c2 97       	sbiw	r24, 0x32	; 50
  fc:	a1 09       	sbc	r26, r1
  fe:	b1 09       	sbc	r27, r1
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	ab 83       	std	Y+3, r26	; 0x03
 106:	bc 83       	std	Y+4, r27	; 0x04
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	9a 81       	ldd	r25, Y+2	; 0x02
 10c:	ab 81       	ldd	r26, Y+3	; 0x03
 10e:	bc 81       	ldd	r27, Y+4	; 0x04
 110:	b7 fd       	sbrc	r27, 7
 112:	12 c0       	rjmp	.+36     	; 0x138 <delay_ms+0x54>
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	ab 81       	ldd	r26, Y+3	; 0x03
 11a:	bc 81       	ldd	r27, Y+4	; 0x04
 11c:	ac 01       	movw	r20, r24
 11e:	bd 01       	movw	r22, r26
 120:	41 50       	subi	r20, 0x01	; 1
 122:	51 09       	sbc	r21, r1
 124:	61 09       	sbc	r22, r1
 126:	71 09       	sbc	r23, r1
 128:	49 83       	std	Y+1, r20	; 0x01
 12a:	5a 83       	std	Y+2, r21	; 0x02
 12c:	6b 83       	std	Y+3, r22	; 0x03
 12e:	7c 83       	std	Y+4, r23	; 0x04
 130:	89 2b       	or	r24, r25
 132:	8a 2b       	or	r24, r26
 134:	8b 2b       	or	r24, r27
 136:	71 f7       	brne	.-36     	; 0x114 <delay_ms+0x30>
 138:	24 96       	adiw	r28, 0x04	; 4
 13a:	e2 e0       	ldi	r30, 0x02	; 2
 13c:	fc c4       	rjmp	.+2552   	; 0xb36 <__epilogue_restores__+0x20>

0000013e <timer_service>:

void timer_service() {
	timer_cnt++;
 13e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 142:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 146:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 14a:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	a1 1d       	adc	r26, r1
 152:	b1 1d       	adc	r27, r1
 154:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 158:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 15c:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__data_end+0x2>
 160:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__data_end+0x3>
 164:	08 95       	ret

00000166 <timer_enable>:
}

void timer_enable(timer_t *inst, bool enable) {
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	fc 01       	movw	r30, r24
	inst->tik = timer_cnt + inst->value;
 16c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 170:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 174:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 178:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 17c:	04 81       	ldd	r16, Z+4	; 0x04
 17e:	15 81       	ldd	r17, Z+5	; 0x05
 180:	26 81       	ldd	r18, Z+6	; 0x06
 182:	37 81       	ldd	r19, Z+7	; 0x07
 184:	80 0f       	add	r24, r16
 186:	91 1f       	adc	r25, r17
 188:	a2 1f       	adc	r26, r18
 18a:	b3 1f       	adc	r27, r19
 18c:	80 83       	st	Z, r24
 18e:	91 83       	std	Z+1, r25	; 0x01
 190:	a2 83       	std	Z+2, r26	; 0x02
 192:	b3 83       	std	Z+3, r27	; 0x03
	inst->enabled = enable;
 194:	60 87       	std	Z+8, r22	; 0x08
}
 196:	1f 91       	pop	r17
 198:	0f 91       	pop	r16
 19a:	08 95       	ret

0000019c <timer_tik>:

bool timer_tik(timer_t *inst) {
 19c:	fc 01       	movw	r30, r24
	bool tick = inst->tik < timer_cnt ? inst->enabled : false;
 19e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1a2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1a6:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 1aa:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 1ae:	40 81       	ld	r20, Z
 1b0:	51 81       	ldd	r21, Z+1	; 0x01
 1b2:	62 81       	ldd	r22, Z+2	; 0x02
 1b4:	73 81       	ldd	r23, Z+3	; 0x03
 1b6:	48 17       	cp	r20, r24
 1b8:	59 07       	cpc	r21, r25
 1ba:	6a 07       	cpc	r22, r26
 1bc:	7b 07       	cpc	r23, r27
 1be:	20 f4       	brcc	.+8      	; 0x1c8 <timer_tik+0x2c>
 1c0:	80 85       	ldd	r24, Z+8	; 0x08
 1c2:	81 11       	cpse	r24, r1
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <timer_tik+0x30>
 1c6:	08 95       	ret
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret
	if(tick) {
		inst->tik = timer_cnt + inst->value;
 1cc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 1d0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 1d4:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <__data_end+0x2>
 1d8:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <__data_end+0x3>
 1dc:	44 81       	ldd	r20, Z+4	; 0x04
 1de:	55 81       	ldd	r21, Z+5	; 0x05
 1e0:	66 81       	ldd	r22, Z+6	; 0x06
 1e2:	77 81       	ldd	r23, Z+7	; 0x07
 1e4:	84 0f       	add	r24, r20
 1e6:	95 1f       	adc	r25, r21
 1e8:	a6 1f       	adc	r26, r22
 1ea:	b7 1f       	adc	r27, r23
 1ec:	80 83       	st	Z, r24
 1ee:	91 83       	std	Z+1, r25	; 0x01
 1f0:	a2 83       	std	Z+2, r26	; 0x02
 1f2:	b3 83       	std	Z+3, r27	; 0x03
	inst->tik = timer_cnt + inst->value;
	inst->enabled = enable;
}

bool timer_tik(timer_t *inst) {
	bool tick = inst->tik < timer_cnt ? inst->enabled : false;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
	if(tick) {
		inst->tik = timer_cnt + inst->value;
	}
	return tick;
}
 1f6:	08 95       	ret

000001f8 <ssd1306_wr_cmd>:
	return 128;
}

uint16_t ssd1306_get_y(void) {
	return 64;
}
 1f8:	5c 98       	cbi	0x0b, 4	; 11
 1fa:	5e 98       	cbi	0x0b, 6	; 11
 1fc:	94 c0       	rjmp	.+296    	; 0x326 <spi_wrd_byte>
 1fe:	08 95       	ret

00000200 <ssd1306_on>:
#endif
	ssd1306_on(inst, true);
}

void ssd1306_on(spi_t *inst, bool state) {
	ssd1306_wr_cmd(inst, state ? 0xAF : 0xAE);
 200:	61 11       	cpse	r22, r1
 202:	02 c0       	rjmp	.+4      	; 0x208 <ssd1306_on+0x8>
 204:	6e ea       	ldi	r22, 0xAE	; 174
 206:	01 c0       	rjmp	.+2      	; 0x20a <ssd1306_on+0xa>
 208:	6f ea       	ldi	r22, 0xAF	; 175
 20a:	f6 df       	rcall	.-20     	; 0x1f8 <ssd1306_wr_cmd>
	SPI_SSD1306_CS_DEASSERT();
 20c:	5e 9a       	sbi	0x0b, 6	; 11
 20e:	08 95       	ret

00000210 <ssd1306_rfsh>:

uint16_t ssd1306_get_y(void) {
	return 64;
}

void ssd1306_rfsh(spi_t *inst, uint8_t *buf) {
 210:	0f 93       	push	r16
 212:	1f 93       	push	r17
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	ec 01       	movw	r28, r24
 21a:	8b 01       	movw	r16, r22
	/* Set start line */
	//ssd1306_wr_cmd(0x40);

#ifndef SSD1306_USE_NO_BUF
	SPI_SSD1306_CS_ASSERT();
 21c:	5e 98       	cbi	0x0b, 6	; 11
	ssd1306_wr_cmd(inst, 0x21);
 21e:	61 e2       	ldi	r22, 0x21	; 33
 220:	eb df       	rcall	.-42     	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x00);
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	ce 01       	movw	r24, r28
 226:	e8 df       	rcall	.-48     	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x7F);
 228:	6f e7       	ldi	r22, 0x7F	; 127
 22a:	ce 01       	movw	r24, r28
 22c:	e5 df       	rcall	.-54     	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x22);
 22e:	62 e2       	ldi	r22, 0x22	; 34
 230:	ce 01       	movw	r24, r28
 232:	e2 df       	rcall	.-60     	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x00);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	ce 01       	movw	r24, r28
 238:	df df       	rcall	.-66     	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x07);
 23a:	67 e0       	ldi	r22, 0x07	; 7
 23c:	ce 01       	movw	r24, r28
 23e:	dc df       	rcall	.-72     	; 0x1f8 <ssd1306_wr_cmd>
	SSD1306_DC_PORT |= SSD1306_DC_PIN;
 240:	5c 9a       	sbi	0x0b, 4	; 11
	spi_wr_buf(inst, buf, 1024);
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	54 e0       	ldi	r21, 0x04	; 4
 246:	b8 01       	movw	r22, r16
 248:	ce 01       	movw	r24, r28
 24a:	7b d0       	rcall	.+246    	; 0x342 <spi_wr_buf>
	SPI_SSD1306_CS_DEASSERT();
 24c:	5e 9a       	sbi	0x0b, 6	; 11
#endif
	ssd1306_on(inst, true);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	ce 01       	movw	r24, r28
 252:	d6 df       	rcall	.-84     	; 0x200 <ssd1306_on>
 254:	df 91       	pop	r29
}
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <ssd1306_init>:
 25e:	0f 93       	push	r16
	0b01000000,
	0b10000000
};
#endif

void ssd1306_init(spi_t *inst, uint8_t *buf) {
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	ec 01       	movw	r28, r24
 268:	8b 01       	movw	r16, r22
	SSD1306_DC_DIR |= SSD1306_DC_PIN;
 26a:	54 9a       	sbi	0x0a, 4	; 10
	SSD1306_RST_DIR |= SSD1306_RST_PIN;
 26c:	57 9a       	sbi	0x0a, 7	; 10
	SSD1306_RST_PORT &= ~SSD1306_RST_PIN;
 26e:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(2);
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	37 df       	rcall	.-402    	; 0xe4 <delay_ms>
	SSD1306_RST_PORT |= SSD1306_RST_PIN;
 276:	5f 9a       	sbi	0x0b, 7	; 11
	delay_ms(10);
 278:	8a e0       	ldi	r24, 0x0A	; 10
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	33 df       	rcall	.-410    	; 0xe4 <delay_ms>

	ssd1306_wr_cmd(inst, SSD1306_DISPLAYOFF);
 27e:	6e ea       	ldi	r22, 0xAE	; 174
 280:	ce 01       	movw	r24, r28
 282:	ba df       	rcall	.-140    	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_SETDISPLAYCLOCKDIV);
 284:	65 ed       	ldi	r22, 0xD5	; 213
 286:	ce 01       	movw	r24, r28
 288:	b7 df       	rcall	.-146    	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0xF0);
 28a:	60 ef       	ldi	r22, 0xF0	; 240
 28c:	ce 01       	movw	r24, r28
 28e:	b4 df       	rcall	.-152    	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_CHARGEPUMP);
 290:	6d e8       	ldi	r22, 0x8D	; 141
 292:	ce 01       	movw	r24, r28
 294:	b1 df       	rcall	.-158    	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x14);
 296:	64 e1       	ldi	r22, 0x14	; 20
 298:	ce 01       	movw	r24, r28
 29a:	ae df       	rcall	.-164    	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_SEGREMAP | 0x1);
 29c:	61 ea       	ldi	r22, 0xA1	; 161
 29e:	ce 01       	movw	r24, r28
 2a0:	ab df       	rcall	.-170    	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_COMSCANDEC);
 2a2:	68 ec       	ldi	r22, 0xC8	; 200
 2a4:	ce 01       	movw	r24, r28
 2a6:	a8 df       	rcall	.-176    	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_SETCONTRAST);
 2a8:	61 e8       	ldi	r22, 0x81	; 129
 2aa:	ce 01       	movw	r24, r28
 2ac:	a5 df       	rcall	.-182    	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x8F);
 2ae:	6f e8       	ldi	r22, 0x8F	; 143
 2b0:	ce 01       	movw	r24, r28
 2b2:	a2 df       	rcall	.-188    	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_SETPRECHARGE);
 2b4:	69 ed       	ldi	r22, 0xD9	; 217
 2b6:	ce 01       	movw	r24, r28
 2b8:	9f df       	rcall	.-194    	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0xF1);
 2ba:	61 ef       	ldi	r22, 0xF1	; 241
 2bc:	ce 01       	movw	r24, r28
 2be:	9c df       	rcall	.-200    	; 0x1f8 <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_MEMORYMODE);
 2c0:	60 e2       	ldi	r22, 0x20	; 32
 2c2:	ce 01       	movw	r24, r28
 2c4:	99 df       	rcall	.-206    	; 0x1f8 <ssd1306_wr_cmd>
 2c6:	60 e0       	ldi	r22, 0x00	; 0
	ssd1306_wr_cmd(inst, 0x00);
 2c8:	ce 01       	movw	r24, r28
 2ca:	96 df       	rcall	.-212    	; 0x1f8 <ssd1306_wr_cmd>
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	90 e0       	ldi	r25, 0x00	; 0

	delay_ms(2);
 2d0:	09 df       	rcall	.-494    	; 0xe4 <delay_ms>
 2d2:	6f ea       	ldi	r22, 0xAF	; 175
 2d4:	ce 01       	movw	r24, r28
	ssd1306_wr_cmd(inst, SSD1306_DISPLAYON);
 2d6:	90 df       	rcall	.-224    	; 0x1f8 <ssd1306_wr_cmd>
 2d8:	b8 01       	movw	r22, r16
 2da:	c8 01       	movw	r24, r16
 2dc:	9c 5f       	subi	r25, 0xFC	; 252
 2de:	fb 01       	movw	r30, r22
 2e0:	11 92       	st	Z+, r1
 2e2:	bf 01       	movw	r22, r30
	SSD1306_DC_PORT |= SSD1306_DC_PIN;
#endif
	for(uint16_t cnt = 1024; cnt > 0; cnt--)
	{
#ifndef SSD1306_USE_NO_BUF
		*buf++ = 0x00;
 2e4:	e8 17       	cp	r30, r24
 2e6:	f9 07       	cpc	r31, r25
 2e8:	d1 f7       	brne	.-12     	; 0x2de <ssd1306_init+0x80>
	ssd1306_wr_cmd(inst, 0x22);
	ssd1306_wr_cmd(inst, 0x00);
	ssd1306_wr_cmd(inst, 0x07);
	SSD1306_DC_PORT |= SSD1306_DC_PIN;
#endif
	for(uint16_t cnt = 1024; cnt > 0; cnt--)
 2ea:	5e 9a       	sbi	0x0b, 6	; 11
 2ec:	ce 01       	movw	r24, r28
 2ee:	90 df       	rcall	.-224    	; 0x210 <ssd1306_rfsh>
		*buf++ = 0x00;
#else
		spi_wrd_byte(inst, 0x00);
#endif
	}
	SPI_SSD1306_CS_DEASSERT();
 2f0:	df 91       	pop	r29
	ssd1306_rfsh(inst, buf);
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
}
 2f8:	08 95       	ret

000002fa <spi_init>:
 2fa:	56 9a       	sbi	0x0a, 6	; 10
 2fc:	52 9a       	sbi	0x0a, 2	; 10
 2fe:	23 9a       	sbi	0x04, 3	; 4
 300:	08 9a       	sbi	0x01, 0	; 1

void spi_wrd_buf(spi_t *inst, uint8_t *rx_buf, uint8_t *tx_buf, uint16_t count) {
	while(count--) {
		*rx_buf++ = spi_wrd_byte(inst, *tx_buf++);
	}
}
 302:	09 9a       	sbi	0x01, 1	; 1
 304:	20 9a       	sbi	0x04, 0	; 4
 306:	55 9a       	sbi	0x0a, 5	; 10
 308:	21 9a       	sbi	0x04, 1	; 4
 30a:	22 9a       	sbi	0x04, 2	; 4
 30c:	dc 01       	movw	r26, r24
 30e:	ed 91       	ld	r30, X+
 310:	fc 91       	ld	r31, X
 312:	11 97       	sbiw	r26, 0x01	; 1
 314:	20 e5       	ldi	r18, 0x50	; 80
 316:	20 83       	st	Z, r18
 318:	12 96       	adiw	r26, 0x02	; 2
 31a:	ed 91       	ld	r30, X+
 31c:	fc 91       	ld	r31, X
 31e:	13 97       	sbiw	r26, 0x03	; 3
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 83       	st	Z, r24
 324:	08 95       	ret

00000326 <spi_wrd_byte>:
 326:	fc 01       	movw	r30, r24
 328:	a4 81       	ldd	r26, Z+4	; 0x04
 32a:	b5 81       	ldd	r27, Z+5	; 0x05
 32c:	6c 93       	st	X, r22
 32e:	a2 81       	ldd	r26, Z+2	; 0x02
 330:	b3 81       	ldd	r27, Z+3	; 0x03
 332:	8c 91       	ld	r24, X
 334:	87 ff       	sbrs	r24, 7
 336:	fd cf       	rjmp	.-6      	; 0x332 <spi_wrd_byte+0xc>
 338:	04 80       	ldd	r0, Z+4	; 0x04
 33a:	f5 81       	ldd	r31, Z+5	; 0x05
 33c:	e0 2d       	mov	r30, r0
 33e:	80 81       	ld	r24, Z
 340:	08 95       	ret

00000342 <spi_wr_buf>:

void spi_wr_buf(spi_t *inst, uint8_t *tx_buf, uint16_t count) {
 342:	ef 92       	push	r14
 344:	ff 92       	push	r15
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	7c 01       	movw	r14, r24
 350:	eb 01       	movw	r28, r22
 352:	8b 01       	movw	r16, r22
 354:	04 0f       	add	r16, r20
 356:	15 1f       	adc	r17, r21
	while(count--) {
 358:	c0 17       	cp	r28, r16
 35a:	d1 07       	cpc	r29, r17
 35c:	21 f0       	breq	.+8      	; 0x366 <spi_wr_buf+0x24>
		spi_wrd_byte(inst, *tx_buf++);
 35e:	69 91       	ld	r22, Y+
 360:	c7 01       	movw	r24, r14
 362:	e1 df       	rcall	.-62     	; 0x326 <spi_wrd_byte>
 364:	f9 cf       	rjmp	.-14     	; 0x358 <spi_wr_buf+0x16>
	}
}
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	e6 e0       	ldi	r30, 0x06	; 6
 36c:	e0 c3       	rjmp	.+1984   	; 0xb2e <__epilogue_restores__+0x18>

0000036e <wr>:
		baud = 255;
	*inst->baud = baud;
	*inst->ctrla = FPGA_TWI_MASTER_ENABLE_bm;
}

static twiErrCode_e wr(twi_t *inst, uint8_t slaveAddr, uint8_t* bufSend, uint8_t lenSend, uint8_t* bufRec, uint16_t lenRec) {
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	fc 01       	movw	r30, r24
	unsigned int cnt_bytes;
	if(lenSend)
 37c:	22 23       	and	r18, r18
 37e:	09 f4       	brne	.+2      	; 0x382 <wr+0x14>
 380:	79 c0       	rjmp	.+242    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
	{
		*inst->data = slaveAddr;
 382:	a2 85       	ldd	r26, Z+10	; 0x0a
 384:	b3 85       	ldd	r27, Z+11	; 0x0b
 386:	6c 93       	st	X, r22
		while ((*inst->status & FPGA_TWI_MASTER_WIF_bm) == 0);
 388:	a6 81       	ldd	r26, Z+6	; 0x06
 38a:	b7 81       	ldd	r27, Z+7	; 0x07
 38c:	8c 91       	ld	r24, X
 38e:	86 ff       	sbrs	r24, 6
 390:	fd cf       	rjmp	.-6      	; 0x38c <wr+0x1e>
		if(*inst->status & FPGA_TWI_MASTER_RXACK_bm)
 392:	8c 91       	ld	r24, X
 394:	84 fd       	sbrc	r24, 4
 396:	03 c0       	rjmp	.+6      	; 0x39e <wr+0x30>
 398:	ea 01       	movw	r28, r20
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
			while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
			return twiErr_Nack;
		}
		for(cnt_bytes = 0; cnt_bytes < lenSend; cnt_bytes++)
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	0c c0       	rjmp	.+24     	; 0x3b6 <wr+0x48>
	{
		*inst->data = slaveAddr;
		while ((*inst->status & FPGA_TWI_MASTER_WIF_bm) == 0);
		if(*inst->status & FPGA_TWI_MASTER_RXACK_bm)
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
 39e:	a4 81       	ldd	r26, Z+4	; 0x04
 3a0:	b5 81       	ldd	r27, Z+5	; 0x05
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	8c 93       	st	X, r24
			while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
 3a6:	04 80       	ldd	r0, Z+4	; 0x04
 3a8:	f5 81       	ldd	r31, Z+5	; 0x05
 3aa:	e0 2d       	mov	r30, r0
 3ac:	80 81       	ld	r24, Z
 3ae:	83 70       	andi	r24, 0x03	; 3
 3b0:	e9 f7       	brne	.-6      	; 0x3ac <wr+0x3e>
			return twiErr_Nack;
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	6c c0       	rjmp	.+216    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		}
		for(cnt_bytes = 0; cnt_bytes < lenSend; cnt_bytes++)
 3b6:	ce 01       	movw	r24, r28
 3b8:	84 1b       	sub	r24, r20
 3ba:	95 0b       	sbc	r25, r21
 3bc:	82 17       	cp	r24, r18
 3be:	93 07       	cpc	r25, r19
 3c0:	b8 f4       	brcc	.+46     	; 0x3f0 <wr+0x82>
		{
			*inst->data = *bufSend++;
 3c2:	a2 85       	ldd	r26, Z+10	; 0x0a
 3c4:	b3 85       	ldd	r27, Z+11	; 0x0b
 3c6:	89 91       	ld	r24, Y+
 3c8:	8c 93       	st	X, r24
			while ((*inst->status & FPGA_TWI_MASTER_WIF_bm) == 0);
 3ca:	a6 81       	ldd	r26, Z+6	; 0x06
 3cc:	b7 81       	ldd	r27, Z+7	; 0x07
 3ce:	8c 91       	ld	r24, X
 3d0:	86 ff       	sbrs	r24, 6
 3d2:	fd cf       	rjmp	.-6      	; 0x3ce <wr+0x60>
			if(*inst->status & FPGA_TWI_MASTER_RXACK_bm)
 3d4:	8c 91       	ld	r24, X
 3d6:	84 ff       	sbrs	r24, 4
 3d8:	ee cf       	rjmp	.-36     	; 0x3b6 <wr+0x48>
			{
				*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
 3da:	a4 81       	ldd	r26, Z+4	; 0x04
 3dc:	b5 81       	ldd	r27, Z+5	; 0x05
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	8c 93       	st	X, r24
				while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
 3e2:	04 80       	ldd	r0, Z+4	; 0x04
 3e4:	f5 81       	ldd	r31, Z+5	; 0x05
 3e6:	e0 2d       	mov	r30, r0
 3e8:	80 81       	ld	r24, Z
 3ea:	83 70       	andi	r24, 0x03	; 3
 3ec:	e9 f7       	brne	.-6      	; 0x3e8 <wr+0x7a>
 3ee:	e1 cf       	rjmp	.-62     	; 0x3b2 <wr+0x44>
				return twiErr_Nack;
			}
		}
	}
	if(lenRec)
 3f0:	e1 14       	cp	r14, r1
 3f2:	f1 04       	cpc	r15, r1
 3f4:	09 f4       	brne	.+2      	; 0x3f8 <wr+0x8a>
 3f6:	41 c0       	rjmp	.+130    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	{
		if(lenSend)
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_REPSTART_gc;
 3f8:	a4 81       	ldd	r26, Z+4	; 0x04
 3fa:	b5 81       	ldd	r27, Z+5	; 0x05
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	8c 93       	st	X, r24
			while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
 400:	a4 81       	ldd	r26, Z+4	; 0x04
 402:	b5 81       	ldd	r27, Z+5	; 0x05
 404:	8c 91       	ld	r24, X
 406:	83 70       	andi	r24, 0x03	; 3
 408:	e9 f7       	brne	.-6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		}
		*inst->data = slaveAddr | 0x01;
 40a:	a2 85       	ldd	r26, Z+10	; 0x0a
 40c:	b3 85       	ldd	r27, Z+11	; 0x0b
 40e:	61 60       	ori	r22, 0x01	; 1
 410:	6c 93       	st	X, r22
		while ((*inst->status & FPGA_TWI_MASTER_WIF_bm) == 0);
 412:	a6 81       	ldd	r26, Z+6	; 0x06
 414:	b7 81       	ldd	r27, Z+7	; 0x07
 416:	8c 91       	ld	r24, X
 418:	86 ff       	sbrs	r24, 6
 41a:	fd cf       	rjmp	.-6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		if(*inst->status & FPGA_TWI_MASTER_RXACK_bm)
 41c:	8c 91       	ld	r24, X
 41e:	84 fd       	sbrc	r24, 4
 420:	07 c0       	rjmp	.+14     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 422:	d8 01       	movw	r26, r16
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
			while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
			return twiErr_Nack;
		}
		for(cnt_bytes = 0; cnt_bytes < lenRec; cnt_bytes++)
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_RECVTRANS_gc | ((cnt_bytes == lenRec - 1) ? FPGA_TWI_MASTER_ACKACT_bm : 0 );
 428:	a7 01       	movw	r20, r14
 42a:	41 50       	subi	r20, 0x01	; 1
 42c:	51 09       	sbc	r21, r1
 42e:	1c c0       	rjmp	.+56     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		}
		*inst->data = slaveAddr | 0x01;
		while ((*inst->status & FPGA_TWI_MASTER_WIF_bm) == 0);
		if(*inst->status & FPGA_TWI_MASTER_RXACK_bm)
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
 430:	a4 81       	ldd	r26, Z+4	; 0x04
 432:	b5 81       	ldd	r27, Z+5	; 0x05
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	8c 93       	st	X, r24
			while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
 438:	04 80       	ldd	r0, Z+4	; 0x04
 43a:	f5 81       	ldd	r31, Z+5	; 0x05
 43c:	e0 2d       	mov	r30, r0
 43e:	80 81       	ld	r24, Z
 440:	83 70       	andi	r24, 0x03	; 3
 442:	e9 f7       	brne	.-6      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 444:	b6 cf       	rjmp	.-148    	; 0x3b2 <wr+0x44>
			return twiErr_Nack;
		}
		for(cnt_bytes = 0; cnt_bytes < lenRec; cnt_bytes++)
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_RECVTRANS_gc | ((cnt_bytes == lenRec - 1) ? FPGA_TWI_MASTER_ACKACT_bm : 0 );
 446:	c4 81       	ldd	r28, Z+4	; 0x04
 448:	d5 81       	ldd	r29, Z+5	; 0x05
 44a:	84 17       	cp	r24, r20
 44c:	95 07       	cpc	r25, r21
 44e:	81 f0       	breq	.+32     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 450:	22 e0       	ldi	r18, 0x02	; 2
 452:	28 83       	st	Y, r18
			while ((*inst->status & FPGA_TWI_MASTER_RIF_bm) == 0);
 454:	c6 81       	ldd	r28, Z+6	; 0x06
 456:	d7 81       	ldd	r29, Z+7	; 0x07
 458:	28 81       	ld	r18, Y
 45a:	27 ff       	sbrs	r18, 7
 45c:	fd cf       	rjmp	.-6      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
			*bufRec++ = *inst->data;
 45e:	c2 85       	ldd	r28, Z+10	; 0x0a
 460:	d3 85       	ldd	r29, Z+11	; 0x0b
 462:	28 81       	ld	r18, Y
 464:	2d 93       	st	X+, r18
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
			while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
			return twiErr_Nack;
		}
		for(cnt_bytes = 0; cnt_bytes < lenRec; cnt_bytes++)
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	8e 15       	cp	r24, r14
 46a:	9f 05       	cpc	r25, r15
 46c:	61 f7       	brne	.-40     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_RECVTRANS_gc | ((cnt_bytes == lenRec - 1) ? FPGA_TWI_MASTER_ACKACT_bm : 0 );
 470:	26 e0       	ldi	r18, 0x06	; 6
 472:	ef cf       	rjmp	.-34     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
				while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
				return twiErr_Nack;
			}
		}
	}
	if(lenRec)
 474:	e1 14       	cp	r14, r1
 476:	f1 04       	cpc	r15, r1
 478:	41 f6       	brne	.-112    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_RECVTRANS_gc | ((cnt_bytes == lenRec - 1) ? FPGA_TWI_MASTER_ACKACT_bm : 0 );
			while ((*inst->status & FPGA_TWI_MASTER_RIF_bm) == 0);
			*bufRec++ = *inst->data;
		}
	}
	*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
 47a:	a4 81       	ldd	r26, Z+4	; 0x04
 47c:	b5 81       	ldd	r27, Z+5	; 0x05
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	8c 93       	st	X, r24
	while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
 482:	04 80       	ldd	r0, Z+4	; 0x04
 484:	f5 81       	ldd	r31, Z+5	; 0x05
 486:	e0 2d       	mov	r30, r0
 488:	80 81       	ld	r24, Z
 48a:	83 70       	andi	r24, 0x03	; 3
 48c:	e9 f7       	brne	.-6      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	return twiErr_Ok;
}
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	e6 e0       	ldi	r30, 0x06	; 6
 494:	4c c3       	rjmp	.+1688   	; 0xb2e <__epilogue_restores__+0x18>

00000496 <twi_init>:
#include <stdio.h>

#include "def.h"
#include "twi_s.h"

void twi_init(twi_t *inst, uint32_t twiFreq) {
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	ec 01       	movw	r28, r24
	unsigned int baud = (F_CPU / (twiFreq * 2)) - 1;
 49c:	9a 01       	movw	r18, r20
 49e:	ab 01       	movw	r20, r22
 4a0:	22 0f       	add	r18, r18
 4a2:	33 1f       	adc	r19, r19
 4a4:	44 1f       	adc	r20, r20
 4a6:	55 1f       	adc	r21, r21
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	74 e2       	ldi	r23, 0x24	; 36
 4ac:	84 ef       	ldi	r24, 0xF4	; 244
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	c9 d2       	rcall	.+1426   	; 0xa44 <__udivmodsi4>
 4b2:	21 50       	subi	r18, 0x01	; 1
 4b4:	31 09       	sbc	r19, r1
	if(baud > 255)
		baud = 255;
	*inst->baud = baud;
 4b6:	e8 85       	ldd	r30, Y+8	; 0x08
 4b8:	f9 85       	ldd	r31, Y+9	; 0x09
 4ba:	2f 3f       	cpi	r18, 0xFF	; 255
 4bc:	31 05       	cpc	r19, r1
 4be:	19 f0       	breq	.+6      	; 0x4c6 <twi_init+0x30>
 4c0:	10 f0       	brcs	.+4      	; 0x4c6 <twi_init+0x30>
 4c2:	2f ef       	ldi	r18, 0xFF	; 255
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	20 83       	st	Z, r18
	*inst->ctrla = FPGA_TWI_MASTER_ENABLE_bm;
 4c8:	e8 81       	ld	r30, Y
 4ca:	f9 81       	ldd	r31, Y+1	; 0x01
 4cc:	88 e0       	ldi	r24, 0x08	; 8
 4ce:	80 83       	st	Z, r24
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <twi_writeBytes>:
	*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
	while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
	return twiErr_Ok;
}

int8_t twi_writeBytes(twi_t *inst, uint8_t slaveAddr, uint8_t* buf, uint8_t len) {
 4d6:	ef 92       	push	r14
 4d8:	ff 92       	push	r15
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
	if (!inst)
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	39 f0       	breq	.+14     	; 0x4f0 <twi_writeBytes+0x1a>
		return twiErr_InvalidParam;
	return wr(inst, slaveAddr << 1, buf, len, NULL, 0);
 4e2:	66 0f       	add	r22, r22
 4e4:	e1 2c       	mov	r14, r1
 4e6:	f1 2c       	mov	r15, r1
 4e8:	00 e0       	ldi	r16, 0x00	; 0
 4ea:	10 e0       	ldi	r17, 0x00	; 0
 4ec:	40 df       	rcall	.-384    	; 0x36e <wr>
 4ee:	01 c0       	rjmp	.+2      	; 0x4f2 <twi_writeBytes+0x1c>
	return twiErr_Ok;
}

int8_t twi_writeBytes(twi_t *inst, uint8_t slaveAddr, uint8_t* buf, uint8_t len) {
	if (!inst)
		return twiErr_InvalidParam;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
	return wr(inst, slaveAddr << 1, buf, len, NULL, 0);
}
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	08 95       	ret

000004fc <uart_init>:
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
	/* Get and return received data from buffer */
	return (int8_t)UDR0;
#endif
}
 4fc:	9b 01       	movw	r18, r22
 4fe:	ac 01       	movw	r20, r24
 500:	83 e0       	ldi	r24, 0x03	; 3
 502:	22 0f       	add	r18, r18
 504:	33 1f       	adc	r19, r19
 506:	44 1f       	adc	r20, r20
 508:	55 1f       	adc	r21, r21
 50a:	8a 95       	dec	r24
 50c:	d1 f7       	brne	.-12     	; 0x502 <uart_init+0x6>
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	74 e2       	ldi	r23, 0x24	; 36
 512:	84 ef       	ldi	r24, 0xF4	; 244
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	96 d2       	rcall	.+1324   	; 0xa44 <__udivmodsi4>
 518:	21 50       	subi	r18, 0x01	; 1
 51a:	31 09       	sbc	r19, r1
 51c:	21 15       	cp	r18, r1
 51e:	80 e1       	ldi	r24, 0x10	; 16
 520:	38 07       	cpc	r19, r24
 522:	10 f0       	brcs	.+4      	; 0x528 <uart_init+0x2c>
 524:	2f ef       	ldi	r18, 0xFF	; 255
 526:	3f e0       	ldi	r19, 0x0F	; 15
 528:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
 52c:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>
 530:	82 e0       	ldi	r24, 0x02	; 2
 532:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
 536:	86 e0       	ldi	r24, 0x06	; 6
 538:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
 53c:	88 e1       	ldi	r24, 0x18	; 24
 53e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
 542:	08 95       	ret

00000544 <uart_get_c_nb>:

bool uart_get_c_nb(uint8_t *c) {
#ifdef UCSR1A
	if(! (UCSR1B & (1<<RXEN1)))
 544:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
 548:	24 ff       	sbrs	r18, 4
 54a:	0b c0       	rjmp	.+22     	; 0x562 <uart_get_c_nb+0x1e>
		return false;
	if ( !(UCSR1A & (1<<RXC1)) )
 54c:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
 550:	27 ff       	sbrs	r18, 7
 552:	07 c0       	rjmp	.+14     	; 0x562 <uart_get_c_nb+0x1e>
		return false;
	else {
		asm("nop");
 554:	00 00       	nop
		*c = UDR1;
 556:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>
 55a:	fc 01       	movw	r30, r24
 55c:	20 83       	st	Z, r18
		return true;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	08 95       	ret
}

bool uart_get_c_nb(uint8_t *c) {
#ifdef UCSR1A
	if(! (UCSR1B & (1<<RXEN1)))
		return false;
 562:	80 e0       	ldi	r24, 0x00	; 0
		asm("nop");
		*c = UDR0;
		return true;
	}
#endif
}
 564:	08 95       	ret

00000566 <kbd_init>:
timer_t kbd_d_timer;
timer_t kbd_l_timer;
timer_t kbd_r_timer;

void kbd_init() {
	kbd_u_timer.value = 300;
 566:	8c e2       	ldi	r24, 0x2C	; 44
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	a0 e0       	ldi	r26, 0x00	; 0
 56c:	b0 e0       	ldi	r27, 0x00	; 0
 56e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <kbd_u_timer+0x4>
 572:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <kbd_u_timer+0x5>
 576:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <kbd_u_timer+0x6>
 57a:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <kbd_u_timer+0x7>
	kbd_d_timer.value = 300;
 57e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <kbd_d_timer+0x4>
 582:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <kbd_d_timer+0x5>
 586:	a0 93 29 01 	sts	0x0129, r26	; 0x800129 <kbd_d_timer+0x6>
 58a:	b0 93 2a 01 	sts	0x012A, r27	; 0x80012a <kbd_d_timer+0x7>
	kbd_l_timer.value = 300;
 58e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <kbd_l_timer+0x4>
 592:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <kbd_l_timer+0x5>
 596:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <kbd_l_timer+0x6>
 59a:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <kbd_l_timer+0x7>
	kbd_r_timer.value = 300;
 59e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <kbd_r_timer+0x4>
 5a2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <kbd_r_timer+0x5>
 5a6:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <kbd_r_timer+0x6>
 5aa:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <kbd_r_timer+0x7>
 5ae:	08 95       	ret

000005b0 <freeNove_ThreeWeled_init>:
freeNove_ThreeWeled_t *freeNove_ThreeWeled_deinit(freeNove_ThreeWeled_t *freeNoveInst) {
	if(freeNoveInst) {
		free(freeNoveInst);
	}
	return (freeNove_ThreeWeled_t*)0;
}
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	ec 01       	movw	r28, r24
 5b6:	65 e1       	ldi	r22, 0x15	; 21
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	c6 d2       	rcall	.+1420   	; 0xb4c <calloc>
 5c0:	fc 01       	movw	r30, r24
 5c2:	89 2b       	or	r24, r25
 5c4:	19 f1       	breq	.+70     	; 0x60c <freeNove_ThreeWeled_init+0x5c>
 5c6:	20 97       	sbiw	r28, 0x00	; 0
 5c8:	29 f4       	brne	.+10     	; 0x5d4 <freeNove_ThreeWeled_init+0x24>
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	91 83       	std	Z+1, r25	; 0x01
 5d0:	80 83       	st	Z, r24
 5d2:	1a c0       	rjmp	.+52     	; 0x608 <freeNove_ThreeWeled_init+0x58>
 5d4:	d3 83       	std	Z+3, r29	; 0x03
 5d6:	c2 83       	std	Z+2, r28	; 0x02
 5d8:	88 e1       	ldi	r24, 0x18	; 24
 5da:	84 83       	std	Z+4, r24	; 0x04
 5dc:	11 82       	std	Z+1, r1	; 0x01
 5de:	10 82       	st	Z, r1
 5e0:	2c eb       	ldi	r18, 0xBC	; 188
 5e2:	32 e0       	ldi	r19, 0x02	; 2
 5e4:	36 83       	std	Z+6, r19	; 0x06
 5e6:	25 83       	std	Z+5, r18	; 0x05
 5e8:	8c ed       	ldi	r24, 0xDC	; 220
 5ea:	95 e0       	ldi	r25, 0x05	; 5
 5ec:	96 87       	std	Z+14, r25	; 0x0e
 5ee:	85 87       	std	Z+13, r24	; 0x0d
 5f0:	30 87       	std	Z+8, r19	; 0x08
 5f2:	27 83       	std	Z+7, r18	; 0x07
 5f4:	90 8b       	std	Z+16, r25	; 0x10
 5f6:	87 87       	std	Z+15, r24	; 0x0f
 5f8:	32 87       	std	Z+10, r19	; 0x0a
 5fa:	21 87       	std	Z+9, r18	; 0x09
 5fc:	92 8b       	std	Z+18, r25	; 0x12
 5fe:	81 8b       	std	Z+17, r24	; 0x11
 600:	34 87       	std	Z+12, r19	; 0x0c
 602:	23 87       	std	Z+11, r18	; 0x0b
 604:	94 8b       	std	Z+20, r25	; 0x14
 606:	83 8b       	std	Z+19, r24	; 0x13
 608:	cf 01       	movw	r24, r30
 60a:	02 c0       	rjmp	.+4      	; 0x610 <freeNove_ThreeWeled_init+0x60>
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <freeNove_ThreeWeled_servo>:

bool freeNove_ThreeWeled_servo(freeNove_ThreeWeled_t *freeNoveInst, unsigned char nr, unsigned short value) {
 616:	4f 92       	push	r4
 618:	5f 92       	push	r5
 61a:	6f 92       	push	r6
 61c:	7f 92       	push	r7
 61e:	af 92       	push	r10
 620:	bf 92       	push	r11
 622:	cf 92       	push	r12
 624:	df 92       	push	r13
 626:	ff 92       	push	r15
 628:	0f 93       	push	r16
 62a:	1f 93       	push	r17
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	00 d0       	rcall	.+0      	; 0x632 <freeNove_ThreeWeled_servo+0x1c>
 632:	1f 92       	push	r1
 634:	cd b7       	in	r28, 0x3d	; 61
 636:	de b7       	in	r29, 0x3e	; 62
 638:	8c 01       	movw	r16, r24
 63a:	f6 2e       	mov	r15, r22
    if(!freeNoveInst || !freeNoveInst->twiInst || nr > 3)
 63c:	00 97       	sbiw	r24, 0x00	; 0
 63e:	c1 f1       	breq	.+112    	; 0x6b0 <freeNove_ThreeWeled_servo+0x9a>
 640:	fc 01       	movw	r30, r24
 642:	c2 80       	ldd	r12, Z+2	; 0x02
 644:	d3 80       	ldd	r13, Z+3	; 0x03
 646:	c1 14       	cp	r12, r1
 648:	d1 04       	cpc	r13, r1
 64a:	91 f1       	breq	.+100    	; 0x6b0 <freeNove_ThreeWeled_servo+0x9a>
 64c:	f3 e0       	ldi	r31, 0x03	; 3
 64e:	f6 17       	cp	r31, r22
 650:	78 f1       	brcs	.+94     	; 0x6b0 <freeNove_ThreeWeled_servo+0x9a>
        return false;
    unsigned char buff[3];
    unsigned short tmp = numMap(value, 0, 180, freeNoveInst->servoMin[nr], freeNoveInst->servoMax[nr]);
 652:	fc 01       	movw	r30, r24
 654:	e6 0f       	add	r30, r22
 656:	f1 1d       	adc	r31, r1
 658:	e6 0f       	add	r30, r22
 65a:	f1 1d       	adc	r31, r1
 65c:	25 85       	ldd	r18, Z+13	; 0x0d
 65e:	36 85       	ldd	r19, Z+14	; 0x0e
 660:	a5 80       	ldd	r10, Z+5	; 0x05
 662:	b6 80       	ldd	r11, Z+6	; 0x06
#include "freenove_ThreeWeeled.h"

static uint16_t numMap(unsigned short value, unsigned short fromLow, unsigned short fromHigh, unsigned short toLow, unsigned short toHigh) {
	if(value < fromLow) {
		return fromLow;
	} else if(value > fromHigh) {
 664:	45 3b       	cpi	r20, 0xB5	; 181
 666:	51 05       	cpc	r21, r1
 668:	98 f4       	brcc	.+38     	; 0x690 <freeNove_ThreeWeled_servo+0x7a>
		return fromHigh;
	}
	return ((value - fromLow) * 0x10000) / (((fromHigh - fromLow) * 0x10000) / toHigh) + toLow;
 66a:	2a 01       	movw	r4, r20
 66c:	61 2c       	mov	r6, r1
 66e:	71 2c       	mov	r7, r1
 670:	32 01       	movw	r6, r4
 672:	55 24       	eor	r5, r5
 674:	44 24       	eor	r4, r4
 676:	40 e0       	ldi	r20, 0x00	; 0
 678:	50 e0       	ldi	r21, 0x00	; 0
 67a:	60 e0       	ldi	r22, 0x00	; 0
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	84 eb       	ldi	r24, 0xB4	; 180
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	02 d2       	rcall	.+1028   	; 0xa88 <__divmodsi4>
 684:	c3 01       	movw	r24, r6
 686:	b2 01       	movw	r22, r4
 688:	ff d1       	rcall	.+1022   	; 0xa88 <__divmodsi4>
 68a:	2a 0d       	add	r18, r10
 68c:	3b 1d       	adc	r19, r11
 68e:	02 c0       	rjmp	.+4      	; 0x694 <freeNove_ThreeWeled_servo+0x7e>

static uint16_t numMap(unsigned short value, unsigned short fromLow, unsigned short fromHigh, unsigned short toLow, unsigned short toHigh) {
	if(value < fromLow) {
		return fromLow;
	} else if(value > fromHigh) {
		return fromHigh;
 690:	24 eb       	ldi	r18, 0xB4	; 180
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	f8 01       	movw	r30, r16
bool freeNove_ThreeWeled_servo(freeNove_ThreeWeled_t *freeNoveInst, unsigned char nr, unsigned short value) {
    if(!freeNoveInst || !freeNoveInst->twiInst || nr > 3)
        return false;
    unsigned char buff[3];
    unsigned short tmp = numMap(value, 0, 180, freeNoveInst->servoMin[nr], freeNoveInst->servoMax[nr]);
    buff[0] = freeNove_TV_CMD_SERVO1 + nr;
 696:	f9 82       	std	Y+1, r15	; 0x01
    buff[1] = tmp >> 8;
 698:	3a 83       	std	Y+2, r19	; 0x02
    buff[2] = tmp;
 69a:	2b 83       	std	Y+3, r18	; 0x03
    if(twi_writeBytes(freeNoveInst->twiInst, freeNoveInst->devAddr, buff, 3) < 1)
 69c:	23 e0       	ldi	r18, 0x03	; 3
 69e:	ae 01       	movw	r20, r28
 6a0:	4f 5f       	subi	r20, 0xFF	; 255
 6a2:	5f 4f       	sbci	r21, 0xFF	; 255
 6a4:	64 81       	ldd	r22, Z+4	; 0x04
 6a6:	c6 01       	movw	r24, r12
 6a8:	16 df       	rcall	.-468    	; 0x4d6 <twi_writeBytes>
 6aa:	91 e0       	ldi	r25, 0x01	; 1
 6ac:	18 16       	cp	r1, r24
 6ae:	0c f0       	brlt	.+2      	; 0x6b2 <freeNove_ThreeWeled_servo+0x9c>
	return (freeNove_ThreeWeled_t*)0;
}

bool freeNove_ThreeWeled_servo(freeNove_ThreeWeled_t *freeNoveInst, unsigned char nr, unsigned short value) {
    if(!freeNoveInst || !freeNoveInst->twiInst || nr > 3)
        return false;
 6b0:	90 e0       	ldi	r25, 0x00	; 0
    buff[1] = tmp >> 8;
    buff[2] = tmp;
    if(twi_writeBytes(freeNoveInst->twiInst, freeNoveInst->devAddr, buff, 3) < 1)
        return false;
    return true;
}
 6b2:	89 2f       	mov	r24, r25
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	0f 90       	pop	r0
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	1f 91       	pop	r17
 6c0:	0f 91       	pop	r16
 6c2:	ff 90       	pop	r15
 6c4:	df 90       	pop	r13
 6c6:	cf 90       	pop	r12
 6c8:	bf 90       	pop	r11
 6ca:	af 90       	pop	r10
 6cc:	7f 90       	pop	r7
 6ce:	6f 90       	pop	r6
 6d0:	5f 90       	pop	r5
 6d2:	4f 90       	pop	r4
 6d4:	08 95       	ret

000006d6 <freeNove_ThreeWeled_pwm>:

bool freeNove_ThreeWeled_pwm(freeNove_ThreeWeled_t *freeNoveInst, unsigned char nr, unsigned short value) {
 6d6:	a3 e0       	ldi	r26, 0x03	; 3
 6d8:	b0 e0       	ldi	r27, 0x00	; 0
 6da:	e0 e7       	ldi	r30, 0x70	; 112
 6dc:	f3 e0       	ldi	r31, 0x03	; 3
 6de:	0f c2       	rjmp	.+1054   	; 0xafe <__prologue_saves__+0x20>
 6e0:	fc 01       	movw	r30, r24
    if(!freeNoveInst || !freeNoveInst->twiInst || nr > 1)
 6e2:	89 2b       	or	r24, r25
 6e4:	99 f0       	breq	.+38     	; 0x70c <freeNove_ThreeWeled_pwm+0x36>
 6e6:	82 81       	ldd	r24, Z+2	; 0x02
 6e8:	93 81       	ldd	r25, Z+3	; 0x03
 6ea:	00 97       	sbiw	r24, 0x00	; 0
 6ec:	79 f0       	breq	.+30     	; 0x70c <freeNove_ThreeWeled_pwm+0x36>
 6ee:	62 30       	cpi	r22, 0x02	; 2
 6f0:	68 f4       	brcc	.+26     	; 0x70c <freeNove_ThreeWeled_pwm+0x36>
        return false;
    unsigned char buff[3];
    buff[0] = freeNove_TV_CMD_PWM1 + nr;
 6f2:	6c 5f       	subi	r22, 0xFC	; 252
 6f4:	69 83       	std	Y+1, r22	; 0x01
    buff[1] = value >> 8;
 6f6:	5a 83       	std	Y+2, r21	; 0x02
    buff[2] = value;
 6f8:	4b 83       	std	Y+3, r20	; 0x03
    if(twi_writeBytes(freeNoveInst->twiInst, freeNoveInst->devAddr, buff, 3) < 1)
 6fa:	23 e0       	ldi	r18, 0x03	; 3
 6fc:	ae 01       	movw	r20, r28
 6fe:	4f 5f       	subi	r20, 0xFF	; 255
 700:	5f 4f       	sbci	r21, 0xFF	; 255
 702:	64 81       	ldd	r22, Z+4	; 0x04
 704:	e8 de       	rcall	.-560    	; 0x4d6 <twi_writeBytes>
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	18 16       	cp	r1, r24
 70a:	0c f0       	brlt	.+2      	; 0x70e <freeNove_ThreeWeled_pwm+0x38>
    return true;
}

bool freeNove_ThreeWeled_pwm(freeNove_ThreeWeled_t *freeNoveInst, unsigned char nr, unsigned short value) {
    if(!freeNoveInst || !freeNoveInst->twiInst || nr > 1)
        return false;
 70c:	90 e0       	ldi	r25, 0x00	; 0
    buff[1] = value >> 8;
    buff[2] = value;
    if(twi_writeBytes(freeNoveInst->twiInst, freeNoveInst->devAddr, buff, 3) < 1)
        return false;
    return true;
}
 70e:	89 2f       	mov	r24, r25
 710:	23 96       	adiw	r28, 0x03	; 3
 712:	e2 e0       	ldi	r30, 0x02	; 2
 714:	10 c2       	rjmp	.+1056   	; 0xb36 <__epilogue_restores__+0x20>

00000716 <freeNove_ThreeWeled_dir>:

bool freeNove_ThreeWeled_dir(freeNove_ThreeWeled_t *freeNoveInst, unsigned char nr, bool value) {
 716:	a3 e0       	ldi	r26, 0x03	; 3
 718:	b0 e0       	ldi	r27, 0x00	; 0
 71a:	e0 e9       	ldi	r30, 0x90	; 144
 71c:	f3 e0       	ldi	r31, 0x03	; 3
 71e:	ef c1       	rjmp	.+990    	; 0xafe <__prologue_saves__+0x20>
 720:	fc 01       	movw	r30, r24
    if(!freeNoveInst || !freeNoveInst->twiInst || nr > 1)
 722:	89 2b       	or	r24, r25
 724:	99 f0       	breq	.+38     	; 0x74c <freeNove_ThreeWeled_dir+0x36>
 726:	82 81       	ldd	r24, Z+2	; 0x02
 728:	93 81       	ldd	r25, Z+3	; 0x03
 72a:	00 97       	sbiw	r24, 0x00	; 0
 72c:	79 f0       	breq	.+30     	; 0x74c <freeNove_ThreeWeled_dir+0x36>
 72e:	62 30       	cpi	r22, 0x02	; 2
 730:	68 f4       	brcc	.+26     	; 0x74c <freeNove_ThreeWeled_dir+0x36>
        return false;
    unsigned char buff[3];
    buff[0] = freeNove_TV_CMD_DIR1 + nr;
 732:	6a 5f       	subi	r22, 0xFA	; 250
 734:	69 83       	std	Y+1, r22	; 0x01
    buff[1] = value;
 736:	4a 83       	std	Y+2, r20	; 0x02
    buff[2] = 0;
 738:	1b 82       	std	Y+3, r1	; 0x03
    if(twi_writeBytes(freeNoveInst->twiInst, freeNoveInst->devAddr, buff, 3) < 1)
 73a:	23 e0       	ldi	r18, 0x03	; 3
 73c:	ae 01       	movw	r20, r28
 73e:	4f 5f       	subi	r20, 0xFF	; 255
 740:	5f 4f       	sbci	r21, 0xFF	; 255
 742:	64 81       	ldd	r22, Z+4	; 0x04
 744:	c8 de       	rcall	.-624    	; 0x4d6 <twi_writeBytes>
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	18 16       	cp	r1, r24
 74a:	0c f0       	brlt	.+2      	; 0x74e <freeNove_ThreeWeled_dir+0x38>
    return true;
}

bool freeNove_ThreeWeled_dir(freeNove_ThreeWeled_t *freeNoveInst, unsigned char nr, bool value) {
    if(!freeNoveInst || !freeNoveInst->twiInst || nr > 1)
        return false;
 74c:	90 e0       	ldi	r25, 0x00	; 0
    buff[1] = value;
    buff[2] = 0;
    if(twi_writeBytes(freeNoveInst->twiInst, freeNoveInst->devAddr, buff, 3) < 1)
        return false;
    return true;
}
 74e:	89 2f       	mov	r24, r25
 750:	23 96       	adiw	r28, 0x03	; 3
 752:	e2 e0       	ldi	r30, 0x02	; 2
 754:	f0 c1       	rjmp	.+992    	; 0xb36 <__epilogue_restores__+0x20>

00000756 <service>:

dir_e direction = LEFT;
int16_t position = 90;

void service() {
	timer_service();
 756:	f3 cc       	rjmp	.-1562   	; 0x13e <timer_service>
 758:	08 95       	ret

0000075a <main>:
}

int main(void)
{
 75a:	a1 e0       	ldi	r26, 0x01	; 1
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	e2 eb       	ldi	r30, 0xB2	; 178
 760:	f3 e0       	ldi	r31, 0x03	; 3
 762:	c6 c1       	rjmp	.+908    	; 0xaf0 <__prologue_saves__+0x12>
	asm("sei");
 764:	78 94       	sei
	
	void (*vect_set_service)(uint16_t) = (void *)BOOT_VECTOR_SET_SERVICE_VECT;
	vect_set_service((uint16_t)service);
 766:	8b ea       	ldi	r24, 0xAB	; 171
 768:	93 e0       	ldi	r25, 0x03	; 3
 76a:	e3 e0       	ldi	r30, 0x03	; 3
 76c:	f8 e7       	ldi	r31, 0x78	; 120
 76e:	09 95       	icall
	
	uartTimeout_timer.value = 2;
 770:	82 e0       	ldi	r24, 0x02	; 2
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	a0 e0       	ldi	r26, 0x00	; 0
 776:	b0 e0       	ldi	r27, 0x00	; 0
 778:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <uartTimeout_timer+0x4>
 77c:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <uartTimeout_timer+0x5>
 780:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <uartTimeout_timer+0x6>
 784:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <uartTimeout_timer+0x7>
	wheelsPoolStop_timer.value = 200;
 788:	88 ec       	ldi	r24, 0xC8	; 200
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	a0 e0       	ldi	r26, 0x00	; 0
 78e:	b0 e0       	ldi	r27, 0x00	; 0
 790:	80 93 48 05 	sts	0x0548, r24	; 0x800548 <wheelsPoolStop_timer+0x4>
 794:	90 93 49 05 	sts	0x0549, r25	; 0x800549 <wheelsPoolStop_timer+0x5>
 798:	a0 93 4a 05 	sts	0x054A, r26	; 0x80054a <wheelsPoolStop_timer+0x6>
 79c:	b0 93 4b 05 	sts	0x054B, r27	; 0x80054b <wheelsPoolStop_timer+0x7>
	timer_enable(&wheelsPoolStop_timer, true);
 7a0:	61 e0       	ldi	r22, 0x01	; 1
 7a2:	84 e4       	ldi	r24, 0x44	; 68
 7a4:	95 e0       	ldi	r25, 0x05	; 5
 7a6:	df dc       	rcall	.-1602   	; 0x166 <timer_enable>

	spi.spcr = &SPCR;
 7a8:	8c e4       	ldi	r24, 0x4C	; 76
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	90 93 64 05 	sts	0x0564, r25	; 0x800564 <spi+0x1>
 7b0:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <spi>
	spi.spsr = &SPSR;
 7b4:	8d e4       	ldi	r24, 0x4D	; 77
 7b6:	90 e0       	ldi	r25, 0x00	; 0
 7b8:	90 93 66 05 	sts	0x0566, r25	; 0x800566 <spi+0x3>
 7bc:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <spi+0x2>
	spi.spdr = &SPDR;
 7c0:	8e e4       	ldi	r24, 0x4E	; 78
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <spi+0x5>
 7c8:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <spi+0x4>
	spi_init(&spi);
 7cc:	83 e6       	ldi	r24, 0x63	; 99
 7ce:	95 e0       	ldi	r25, 0x05	; 5
 7d0:	94 dd       	rcall	.-1240   	; 0x2fa <spi_init>
	
	DISPLAY_FUNC_INIT(&spi, screen_buf);
 7d2:	64 e4       	ldi	r22, 0x44	; 68
 7d4:	71 e0       	ldi	r23, 0x01	; 1
 7d6:	83 e6       	ldi	r24, 0x63	; 99
 7d8:	95 e0       	ldi	r25, 0x05	; 5
 7da:	41 dd       	rcall	.-1406   	; 0x25e <ssd1306_init>
	/*twi.twbr = &TWBR;
	twi.twcr = &TWCR;
	twi.twsr = &TWSR;
	twi.twdr = &TWDR;
	twi.twar = &TWAR;*/
	twi.ctrla = &(*(uint8_t *)0xb8);
 7dc:	88 eb       	ldi	r24, 0xB8	; 184
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	90 93 6a 05 	sts	0x056A, r25	; 0x80056a <twi+0x1>
 7e4:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <twi>
	twi.ctrlb = &(*(uint8_t *)0xb9);
 7e8:	89 eb       	ldi	r24, 0xB9	; 185
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <twi+0x3>
 7f0:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <twi+0x2>
	twi.ctrlc = &(*(uint8_t *)0xba);
 7f4:	8a eb       	ldi	r24, 0xBA	; 186
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <twi+0x5>
 7fc:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <twi+0x4>
	twi.status = &(*(uint8_t *)0xbb);
 800:	8b eb       	ldi	r24, 0xBB	; 187
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	90 93 70 05 	sts	0x0570, r25	; 0x800570 <twi+0x7>
 808:	80 93 6f 05 	sts	0x056F, r24	; 0x80056f <twi+0x6>
	twi.baud = &(*(uint8_t *)0xbc);
 80c:	8c eb       	ldi	r24, 0xBC	; 188
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <twi+0x9>
 814:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <twi+0x8>
	twi.data = &(*(uint8_t *)0xbd);
 818:	8d eb       	ldi	r24, 0xBD	; 189
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	90 93 74 05 	sts	0x0574, r25	; 0x800574 <twi+0xb>
 820:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <twi+0xa>
	twi_init(&twi, 100000);
 824:	40 ea       	ldi	r20, 0xA0	; 160
 826:	56 e8       	ldi	r21, 0x86	; 134
 828:	61 e0       	ldi	r22, 0x01	; 1
 82a:	70 e0       	ldi	r23, 0x00	; 0
 82c:	89 e6       	ldi	r24, 0x69	; 105
 82e:	95 e0       	ldi	r25, 0x05	; 5
	
	freeNoveInst = freeNove_ThreeWeled_init(&twi);
 830:	32 de       	rcall	.-924    	; 0x496 <twi_init>
 832:	89 e6       	ldi	r24, 0x69	; 105
 834:	95 e0       	ldi	r25, 0x05	; 5
 836:	bc de       	rcall	.-648    	; 0x5b0 <freeNove_ThreeWeled_init>
 838:	fc 01       	movw	r30, r24
 83a:	90 93 62 05 	sts	0x0562, r25	; 0x800562 <freeNoveInst+0x1>
 83e:	80 93 61 05 	sts	0x0561, r24	; 0x800561 <freeNoveInst>
	freeNoveInst->servoMin[0] = 700;
 842:	8c eb       	ldi	r24, 0xBC	; 188
 844:	92 e0       	ldi	r25, 0x02	; 2
 846:	96 83       	std	Z+6, r25	; 0x06
 848:	85 83       	std	Z+5, r24	; 0x05
	freeNoveInst->servoMax[0] = 1200;
 84a:	20 eb       	ldi	r18, 0xB0	; 176
 84c:	34 e0       	ldi	r19, 0x04	; 4
 84e:	36 87       	std	Z+14, r19	; 0x0e
 850:	25 87       	std	Z+13, r18	; 0x0d
	freeNoveInst->servoMin[1] = 700;
 852:	90 87       	std	Z+8, r25	; 0x08
 854:	87 83       	std	Z+7, r24	; 0x07
	freeNoveInst->servoMax[1] = 1500;
 856:	2c ed       	ldi	r18, 0xDC	; 220
 858:	35 e0       	ldi	r19, 0x05	; 5
 85a:	30 8b       	std	Z+16, r19	; 0x10
 85c:	27 87       	std	Z+15, r18	; 0x0f
	freeNoveInst->servoMin[2] = 700;
 85e:	92 87       	std	Z+10, r25	; 0x0a
 860:	81 87       	std	Z+9, r24	; 0x09
	freeNoveInst->servoMax[2] = 1500;
 862:	32 8b       	std	Z+18, r19	; 0x12
 864:	21 8b       	std	Z+17, r18	; 0x11
	freeNoveInst->servoMin[3] = 700;
 866:	94 87       	std	Z+12, r25	; 0x0c
 868:	83 87       	std	Z+11, r24	; 0x0b
	freeNoveInst->servoMax[3] = 1500;
 86a:	34 8b       	std	Z+20, r19	; 0x14

	uart_init(57600);
 86c:	23 8b       	std	Z+19, r18	; 0x13
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	71 ee       	ldi	r23, 0xE1	; 225
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	42 de       	rcall	.-892    	; 0x4fc <uart_init>
	
	kbd_init();
 878:	76 de       	rcall	.-788    	; 0x566 <kbd_init>
 87a:	0e e3       	ldi	r16, 0x3E	; 62
		if(timer_tik(&uartTimeout_timer)) {
			timer_enable(&uartTimeout_timer, false);
			if(uartRxCnt == 6 && uartRxBuf[0] == 0xFF && uartRxBuf[1] == 0x55 && (uartRxBuf[2] == (uint8_t)(255 - uartRxBuf[3])) && (uartRxBuf[4] == (uint8_t)(255 - uartRxBuf[5]))) {
				uartRxCommand = (uartRxBuf[4] << 8) | uartRxBuf[2];
			}
			memset(uartRxBuf, 0, sizeof(uartRxBuf));
 87c:	11 e0       	ldi	r17, 0x01	; 1
 87e:	86 e0       	ldi	r24, 0x06	; 6
 880:	d8 2e       	mov	r13, r24
 882:	92 e0       	ldi	r25, 0x02	; 2
				freeNove_ThreeWeled_servo(freeNoveInst, 0, position);
			}
			if(uartRxCommand & REMOTE_5_KEY) {
				position+=SERVO_SENSOR_STEP;
				if(position > 179 - SERVO_SENSOR_STEP) {
					direction = LEFT;
 884:	c9 2e       	mov	r12, r25
					position = 179;
 886:	23 eb       	ldi	r18, 0xB3	; 179
 888:	e2 2e       	mov	r14, r18
 88a:	f1 2c       	mov	r15, r1
				freeNove_ThreeWeled_pwm(freeNoveInst, 1, WHEELS_MAX_SPEED);
			}
			if(uartRxCommand & REMOTE_6_KEY) {
				position-=SERVO_SENSOR_STEP;
				if(position < SERVO_SENSOR_STEP ) {
					direction = RIGHT;
 88c:	33 e0       	ldi	r19, 0x03	; 3
 88e:	b3 2e       	mov	r11, r19
			}
		}
		freeNove_ThreeWeled_servo(freeNoveInst, 0, position);
#endif
		uint8_t c;
		if(uart_get_c_nb(&c)) {
 890:	ce 01       	movw	r24, r28
 892:	01 96       	adiw	r24, 0x01	; 1
 894:	57 de       	rcall	.-850    	; 0x544 <uart_get_c_nb>
 896:	88 23       	and	r24, r24
 898:	89 f0       	breq	.+34     	; 0x8bc <main+0x162>
 89a:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <uartRxCnt>
			if(uartRxCnt < sizeof(uartRxBuf)) {
 89e:	e6 30       	cpi	r30, 0x06	; 6
 8a0:	48 f4       	brcc	.+18     	; 0x8b4 <main+0x15a>
 8a2:	81 e0       	ldi	r24, 0x01	; 1
				uartRxBuf[uartRxCnt++] = c;
 8a4:	8e 0f       	add	r24, r30
 8a6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <uartRxCnt>
 8aa:	f0 e0       	ldi	r31, 0x00	; 0
 8ac:	e2 5c       	subi	r30, 0xC2	; 194
 8ae:	fe 4f       	sbci	r31, 0xFE	; 254
 8b0:	89 81       	ldd	r24, Y+1	; 0x01
			}
			timer_enable(&uartTimeout_timer, true);
 8b2:	80 83       	st	Z, r24
 8b4:	61 e0       	ldi	r22, 0x01	; 1
 8b6:	85 e3       	ldi	r24, 0x35	; 53
 8b8:	91 e0       	ldi	r25, 0x01	; 1
		}
		if(timer_tik(&uartTimeout_timer)) {
 8ba:	55 dc       	rcall	.-1878   	; 0x166 <timer_enable>
 8bc:	85 e3       	ldi	r24, 0x35	; 53
 8be:	91 e0       	ldi	r25, 0x01	; 1
 8c0:	6d dc       	rcall	.-1830   	; 0x19c <timer_tik>
 8c2:	88 23       	and	r24, r24
 8c4:	09 f4       	brne	.+2      	; 0x8c8 <main+0x16e>
 8c6:	a3 c0       	rjmp	.+326    	; 0xa0e <main+0x2b4>
			timer_enable(&uartTimeout_timer, false);
 8c8:	60 e0       	ldi	r22, 0x00	; 0
 8ca:	85 e3       	ldi	r24, 0x35	; 53
 8cc:	91 e0       	ldi	r25, 0x01	; 1
 8ce:	4b dc       	rcall	.-1898   	; 0x166 <timer_enable>
 8d0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <uartRxCnt>
			if(uartRxCnt == 6 && uartRxBuf[0] == 0xFF && uartRxBuf[1] == 0x55 && (uartRxBuf[2] == (uint8_t)(255 - uartRxBuf[3])) && (uartRxBuf[4] == (uint8_t)(255 - uartRxBuf[5]))) {
 8d4:	86 30       	cpi	r24, 0x06	; 6
 8d6:	e1 f4       	brne	.+56     	; 0x910 <main+0x1b6>
 8d8:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <uartRxBuf>
 8dc:	8f 3f       	cpi	r24, 0xFF	; 255
 8de:	c1 f4       	brne	.+48     	; 0x910 <main+0x1b6>
 8e0:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <uartRxBuf+0x1>
 8e4:	85 35       	cpi	r24, 0x55	; 85
 8e6:	a1 f4       	brne	.+40     	; 0x910 <main+0x1b6>
 8e8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <uartRxBuf+0x2>
 8ec:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <uartRxBuf+0x3>
 8f0:	90 95       	com	r25
 8f2:	89 13       	cpse	r24, r25
 8f4:	0d c0       	rjmp	.+26     	; 0x910 <main+0x1b6>
 8f6:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <uartRxBuf+0x4>
 8fa:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <uartRxBuf+0x5>
 8fe:	90 95       	com	r25
 900:	29 13       	cpse	r18, r25
 902:	06 c0       	rjmp	.+12     	; 0x910 <main+0x1b6>
 904:	90 e0       	ldi	r25, 0x00	; 0
				uartRxCommand = (uartRxBuf[4] << 8) | uartRxBuf[2];
 906:	92 2b       	or	r25, r18
 908:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <uartRxCommand+0x1>
 90c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <uartRxCommand>
 910:	f8 01       	movw	r30, r16
			}
			memset(uartRxBuf, 0, sizeof(uartRxBuf));
 912:	8d 2d       	mov	r24, r13
 914:	11 92       	st	Z+, r1
 916:	8a 95       	dec	r24
 918:	e9 f7       	brne	.-6      	; 0x914 <main+0x1ba>
 91a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <uartRxCnt>
			uartRxCnt = 0;
 91e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <uartRxCommand>

			if(uartRxCommand & REMOTE_UP_KEY) {
 922:	80 ff       	sbrs	r24, 0
 924:	02 c0       	rjmp	.+4      	; 0x92a <main+0x1d0>
 926:	41 e0       	ldi	r20, 0x01	; 1
				freeNove_ThreeWeled_dir(freeNoveInst, 0, true);
 928:	07 c0       	rjmp	.+14     	; 0x938 <main+0x1de>
 92a:	81 ff       	sbrs	r24, 1
				freeNove_ThreeWeled_dir(freeNoveInst, 1, true);
				freeNove_ThreeWeled_pwm(freeNoveInst, 0, WHEELS_MAX_SPEED);
				freeNove_ThreeWeled_pwm(freeNoveInst, 1, WHEELS_MAX_SPEED);
			}
			else if(uartRxCommand & REMOTE_DN_KEY) {
 92c:	02 c0       	rjmp	.+4      	; 0x932 <main+0x1d8>
				freeNove_ThreeWeled_dir(freeNoveInst, 0, false);
 92e:	40 e0       	ldi	r20, 0x00	; 0
 930:	0e c0       	rjmp	.+28     	; 0x94e <main+0x1f4>
				freeNove_ThreeWeled_dir(freeNoveInst, 1, false);
				freeNove_ThreeWeled_pwm(freeNoveInst, 0, WHEELS_MAX_SPEED);
				freeNove_ThreeWeled_pwm(freeNoveInst, 1, WHEELS_MAX_SPEED);
			}
			else if(uartRxCommand & REMOTE_LEFT_KEY) {
 932:	82 ff       	sbrs	r24, 2
 934:	09 c0       	rjmp	.+18     	; 0x948 <main+0x1ee>
				freeNove_ThreeWeled_dir(freeNoveInst, 0, false);
 936:	40 e0       	ldi	r20, 0x00	; 0
 938:	60 e0       	ldi	r22, 0x00	; 0
 93a:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <freeNoveInst>
 93e:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <freeNoveInst+0x1>
 942:	e9 de       	rcall	.-558    	; 0x716 <freeNove_ThreeWeled_dir>
				freeNove_ThreeWeled_dir(freeNoveInst, 1, true);
 944:	41 e0       	ldi	r20, 0x01	; 1
 946:	0a c0       	rjmp	.+20     	; 0x95c <main+0x202>
				freeNove_ThreeWeled_pwm(freeNoveInst, 0, WHEELS_MAX_SPEED);
				freeNove_ThreeWeled_pwm(freeNoveInst, 1, WHEELS_MAX_SPEED);
			}
			else if(uartRxCommand & REMOTE_RIGHT_KEY) {
 948:	83 ff       	sbrs	r24, 3
 94a:	1e c0       	rjmp	.+60     	; 0x988 <main+0x22e>
				freeNove_ThreeWeled_dir(freeNoveInst, 0, true);
 94c:	41 e0       	ldi	r20, 0x01	; 1
 94e:	60 e0       	ldi	r22, 0x00	; 0
 950:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <freeNoveInst>
 954:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <freeNoveInst+0x1>
 958:	de de       	rcall	.-580    	; 0x716 <freeNove_ThreeWeled_dir>
				freeNove_ThreeWeled_dir(freeNoveInst, 1, false);
 95a:	40 e0       	ldi	r20, 0x00	; 0
 95c:	61 e0       	ldi	r22, 0x01	; 1
 95e:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <freeNoveInst>
 962:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <freeNoveInst+0x1>
 966:	d7 de       	rcall	.-594    	; 0x716 <freeNove_ThreeWeled_dir>
				freeNove_ThreeWeled_pwm(freeNoveInst, 0, WHEELS_MAX_SPEED);
 968:	40 e9       	ldi	r20, 0x90	; 144
 96a:	51 e0       	ldi	r21, 0x01	; 1
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <freeNoveInst>
 972:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <freeNoveInst+0x1>
 976:	af de       	rcall	.-674    	; 0x6d6 <freeNove_ThreeWeled_pwm>
				freeNove_ThreeWeled_pwm(freeNoveInst, 1, WHEELS_MAX_SPEED);
 978:	40 e9       	ldi	r20, 0x90	; 144
 97a:	51 e0       	ldi	r21, 0x01	; 1
 97c:	61 e0       	ldi	r22, 0x01	; 1
 97e:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <freeNoveInst>
 982:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <freeNoveInst+0x1>
 986:	a7 de       	rcall	.-690    	; 0x6d6 <freeNove_ThreeWeled_pwm>
 988:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <uartRxCommand>
			}
			if(uartRxCommand & REMOTE_6_KEY) {
 98c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <uartRxCommand+0x1>
 990:	91 ff       	sbrs	r25, 1
 992:	1b c0       	rjmp	.+54     	; 0x9ca <main+0x270>
 994:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
				position-=SERVO_SENSOR_STEP;
 998:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <position+0x1>
 99c:	08 97       	sbiw	r24, 0x08	; 8
 99e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <position+0x1>
 9a2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <position>
 9a6:	08 97       	sbiw	r24, 0x08	; 8
				if(position < SERVO_SENSOR_STEP ) {
 9a8:	34 f4       	brge	.+12     	; 0x9b6 <main+0x25c>
					direction = RIGHT;
 9aa:	b0 92 08 01 	sts	0x0108, r11	; 0x800108 <direction>
					position = 0;
 9ae:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <position+0x1>
 9b2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <position>
				}
				freeNove_ThreeWeled_servo(freeNoveInst, 0, position);
 9b6:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <position>
 9ba:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <position+0x1>
 9be:	60 e0       	ldi	r22, 0x00	; 0
 9c0:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <freeNoveInst>
 9c4:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <freeNoveInst+0x1>
 9c8:	26 de       	rcall	.-948    	; 0x616 <freeNove_ThreeWeled_servo>
 9ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <uartRxCommand>
			}
			if(uartRxCommand & REMOTE_5_KEY) {
 9ce:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <uartRxCommand+0x1>
 9d2:	90 ff       	sbrs	r25, 0
 9d4:	1c c0       	rjmp	.+56     	; 0xa0e <main+0x2b4>
 9d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
				position+=SERVO_SENSOR_STEP;
 9da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <position+0x1>
 9de:	08 96       	adiw	r24, 0x08	; 8
 9e0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <position+0x1>
 9e4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <position>
 9e8:	8c 3a       	cpi	r24, 0xAC	; 172
				if(position > 179 - SERVO_SENSOR_STEP) {
 9ea:	91 05       	cpc	r25, r1
 9ec:	34 f0       	brlt	.+12     	; 0x9fa <main+0x2a0>
					direction = LEFT;
 9ee:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <direction>
					position = 179;
 9f2:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <position+0x1>
 9f6:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <position>
				}
				freeNove_ThreeWeled_servo(freeNoveInst, 0, position);
 9fa:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <position>
 9fe:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <position+0x1>
 a02:	60 e0       	ldi	r22, 0x00	; 0
 a04:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <freeNoveInst>
 a08:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <freeNoveInst+0x1>
			}
		}
		if(timer_tik(&wheelsPoolStop_timer) && (uartRxCommand & (REMOTE_UP_KEY || REMOTE_DN_KEY || REMOTE_LEFT_KEY || REMOTE_RIGHT_KEY)) == 0) {
 a0c:	04 de       	rcall	.-1016   	; 0x616 <freeNove_ThreeWeled_servo>
 a0e:	84 e4       	ldi	r24, 0x44	; 68
 a10:	95 e0       	ldi	r25, 0x05	; 5
 a12:	c4 db       	rcall	.-2168   	; 0x19c <timer_tik>
 a14:	88 23       	and	r24, r24
 a16:	09 f4       	brne	.+2      	; 0xa1a <main+0x2c0>
 a18:	3b cf       	rjmp	.-394    	; 0x890 <main+0x136>
 a1a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <uartRxCommand>
 a1e:	80 fd       	sbrc	r24, 0
			freeNove_ThreeWeled_pwm(freeNoveInst, 0, 0);
 a20:	37 cf       	rjmp	.-402    	; 0x890 <main+0x136>
 a22:	40 e0       	ldi	r20, 0x00	; 0
 a24:	50 e0       	ldi	r21, 0x00	; 0
 a26:	60 e0       	ldi	r22, 0x00	; 0
 a28:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <freeNoveInst>
 a2c:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <freeNoveInst+0x1>
 a30:	52 de       	rcall	.-860    	; 0x6d6 <freeNove_ThreeWeled_pwm>
			freeNove_ThreeWeled_pwm(freeNoveInst, 1, 0);
 a32:	40 e0       	ldi	r20, 0x00	; 0
 a34:	50 e0       	ldi	r21, 0x00	; 0
 a36:	61 e0       	ldi	r22, 0x01	; 1
 a38:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <freeNoveInst>
 a3c:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <freeNoveInst+0x1>
 a40:	4a de       	rcall	.-876    	; 0x6d6 <freeNove_ThreeWeled_pwm>
 a42:	26 cf       	rjmp	.-436    	; 0x890 <main+0x136>

00000a44 <__udivmodsi4>:
			}
			if((uartRxCommand & REMOTE_RIGHT_KEY) != (uartRxCommandBack & REMOTE_RIGHT_KEY)) {
			}
			uartRxCommandBack = uartRxCommand;
		}*/
    }
 a44:	a1 e2       	ldi	r26, 0x21	; 33
 a46:	1a 2e       	mov	r1, r26
 a48:	aa 1b       	sub	r26, r26
 a4a:	bb 1b       	sub	r27, r27
 a4c:	fd 01       	movw	r30, r26
 a4e:	0d c0       	rjmp	.+26     	; 0xa6a <__udivmodsi4_ep>

00000a50 <__udivmodsi4_loop>:
 a50:	aa 1f       	adc	r26, r26
 a52:	bb 1f       	adc	r27, r27
 a54:	ee 1f       	adc	r30, r30
 a56:	ff 1f       	adc	r31, r31
 a58:	a2 17       	cp	r26, r18
 a5a:	b3 07       	cpc	r27, r19
 a5c:	e4 07       	cpc	r30, r20
 a5e:	f5 07       	cpc	r31, r21
 a60:	20 f0       	brcs	.+8      	; 0xa6a <__udivmodsi4_ep>
 a62:	a2 1b       	sub	r26, r18
 a64:	b3 0b       	sbc	r27, r19
 a66:	e4 0b       	sbc	r30, r20
 a68:	f5 0b       	sbc	r31, r21

00000a6a <__udivmodsi4_ep>:
 a6a:	66 1f       	adc	r22, r22
 a6c:	77 1f       	adc	r23, r23
 a6e:	88 1f       	adc	r24, r24
 a70:	99 1f       	adc	r25, r25
 a72:	1a 94       	dec	r1
 a74:	69 f7       	brne	.-38     	; 0xa50 <__udivmodsi4_loop>
 a76:	60 95       	com	r22
 a78:	70 95       	com	r23
 a7a:	80 95       	com	r24
 a7c:	90 95       	com	r25
 a7e:	9b 01       	movw	r18, r22
 a80:	ac 01       	movw	r20, r24
 a82:	bd 01       	movw	r22, r26
 a84:	cf 01       	movw	r24, r30
 a86:	08 95       	ret

00000a88 <__divmodsi4>:
 a88:	05 2e       	mov	r0, r21
 a8a:	97 fb       	bst	r25, 7
 a8c:	16 f4       	brtc	.+4      	; 0xa92 <__divmodsi4+0xa>
 a8e:	00 94       	com	r0
 a90:	0f d0       	rcall	.+30     	; 0xab0 <__negsi2>
 a92:	57 fd       	sbrc	r21, 7
 a94:	05 d0       	rcall	.+10     	; 0xaa0 <__divmodsi4_neg2>
 a96:	d6 df       	rcall	.-84     	; 0xa44 <__udivmodsi4>
 a98:	07 fc       	sbrc	r0, 7
 a9a:	02 d0       	rcall	.+4      	; 0xaa0 <__divmodsi4_neg2>
 a9c:	46 f4       	brtc	.+16     	; 0xaae <__divmodsi4_exit>
 a9e:	08 c0       	rjmp	.+16     	; 0xab0 <__negsi2>

00000aa0 <__divmodsi4_neg2>:
 aa0:	50 95       	com	r21
 aa2:	40 95       	com	r20
 aa4:	30 95       	com	r19
 aa6:	21 95       	neg	r18
 aa8:	3f 4f       	sbci	r19, 0xFF	; 255
 aaa:	4f 4f       	sbci	r20, 0xFF	; 255
 aac:	5f 4f       	sbci	r21, 0xFF	; 255

00000aae <__divmodsi4_exit>:
 aae:	08 95       	ret

00000ab0 <__negsi2>:
 ab0:	90 95       	com	r25
 ab2:	80 95       	com	r24
 ab4:	70 95       	com	r23
 ab6:	61 95       	neg	r22
 ab8:	7f 4f       	sbci	r23, 0xFF	; 255
 aba:	8f 4f       	sbci	r24, 0xFF	; 255
 abc:	9f 4f       	sbci	r25, 0xFF	; 255
 abe:	08 95       	ret

00000ac0 <__umulhisi3>:
 ac0:	a2 9f       	mul	r26, r18
 ac2:	b0 01       	movw	r22, r0
 ac4:	b3 9f       	mul	r27, r19
 ac6:	c0 01       	movw	r24, r0
 ac8:	a3 9f       	mul	r26, r19
 aca:	70 0d       	add	r23, r0
 acc:	81 1d       	adc	r24, r1
 ace:	11 24       	eor	r1, r1
 ad0:	91 1d       	adc	r25, r1
 ad2:	b2 9f       	mul	r27, r18
 ad4:	70 0d       	add	r23, r0
 ad6:	81 1d       	adc	r24, r1
 ad8:	11 24       	eor	r1, r1
 ada:	91 1d       	adc	r25, r1
 adc:	08 95       	ret

00000ade <__prologue_saves__>:
 ade:	2f 92       	push	r2
 ae0:	3f 92       	push	r3
 ae2:	4f 92       	push	r4
 ae4:	5f 92       	push	r5
 ae6:	6f 92       	push	r6
 ae8:	7f 92       	push	r7
 aea:	8f 92       	push	r8
 aec:	9f 92       	push	r9
 aee:	af 92       	push	r10
 af0:	bf 92       	push	r11
 af2:	cf 92       	push	r12
 af4:	df 92       	push	r13
 af6:	ef 92       	push	r14
 af8:	ff 92       	push	r15
 afa:	0f 93       	push	r16
 afc:	1f 93       	push	r17
 afe:	cf 93       	push	r28
 b00:	df 93       	push	r29
 b02:	cd b7       	in	r28, 0x3d	; 61
 b04:	de b7       	in	r29, 0x3e	; 62
 b06:	ca 1b       	sub	r28, r26
 b08:	db 0b       	sbc	r29, r27
 b0a:	0f b6       	in	r0, 0x3f	; 63
 b0c:	f8 94       	cli
 b0e:	de bf       	out	0x3e, r29	; 62
 b10:	0f be       	out	0x3f, r0	; 63
 b12:	cd bf       	out	0x3d, r28	; 61
 b14:	09 94       	ijmp

00000b16 <__epilogue_restores__>:
 b16:	2a 88       	ldd	r2, Y+18	; 0x12
 b18:	39 88       	ldd	r3, Y+17	; 0x11
 b1a:	48 88       	ldd	r4, Y+16	; 0x10
 b1c:	5f 84       	ldd	r5, Y+15	; 0x0f
 b1e:	6e 84       	ldd	r6, Y+14	; 0x0e
 b20:	7d 84       	ldd	r7, Y+13	; 0x0d
 b22:	8c 84       	ldd	r8, Y+12	; 0x0c
 b24:	9b 84       	ldd	r9, Y+11	; 0x0b
 b26:	aa 84       	ldd	r10, Y+10	; 0x0a
 b28:	b9 84       	ldd	r11, Y+9	; 0x09
 b2a:	c8 84       	ldd	r12, Y+8	; 0x08
 b2c:	df 80       	ldd	r13, Y+7	; 0x07
 b2e:	ee 80       	ldd	r14, Y+6	; 0x06
 b30:	fd 80       	ldd	r15, Y+5	; 0x05
 b32:	0c 81       	ldd	r16, Y+4	; 0x04
 b34:	1b 81       	ldd	r17, Y+3	; 0x03
 b36:	aa 81       	ldd	r26, Y+2	; 0x02
 b38:	b9 81       	ldd	r27, Y+1	; 0x01
 b3a:	ce 0f       	add	r28, r30
 b3c:	d1 1d       	adc	r29, r1
 b3e:	0f b6       	in	r0, 0x3f	; 63
 b40:	f8 94       	cli
 b42:	de bf       	out	0x3e, r29	; 62
 b44:	0f be       	out	0x3f, r0	; 63
 b46:	cd bf       	out	0x3d, r28	; 61
 b48:	ed 01       	movw	r28, r26
 b4a:	08 95       	ret

00000b4c <calloc>:
 b4c:	0f 93       	push	r16
 b4e:	1f 93       	push	r17
 b50:	cf 93       	push	r28
 b52:	df 93       	push	r29
 b54:	86 9f       	mul	r24, r22
 b56:	80 01       	movw	r16, r0
 b58:	87 9f       	mul	r24, r23
 b5a:	10 0d       	add	r17, r0
 b5c:	96 9f       	mul	r25, r22
 b5e:	10 0d       	add	r17, r0
 b60:	11 24       	eor	r1, r1
 b62:	c8 01       	movw	r24, r16
 b64:	0d d0       	rcall	.+26     	; 0xb80 <malloc>
 b66:	ec 01       	movw	r28, r24
 b68:	00 97       	sbiw	r24, 0x00	; 0
 b6a:	21 f0       	breq	.+8      	; 0xb74 <calloc+0x28>
 b6c:	a8 01       	movw	r20, r16
 b6e:	60 e0       	ldi	r22, 0x00	; 0
 b70:	70 e0       	ldi	r23, 0x00	; 0
 b72:	27 d1       	rcall	.+590    	; 0xdc2 <memset>
 b74:	ce 01       	movw	r24, r28
 b76:	df 91       	pop	r29
 b78:	cf 91       	pop	r28
 b7a:	1f 91       	pop	r17
 b7c:	0f 91       	pop	r16
 b7e:	08 95       	ret

00000b80 <malloc>:
 b80:	0f 93       	push	r16
 b82:	1f 93       	push	r17
 b84:	cf 93       	push	r28
 b86:	df 93       	push	r29
 b88:	82 30       	cpi	r24, 0x02	; 2
 b8a:	91 05       	cpc	r25, r1
 b8c:	10 f4       	brcc	.+4      	; 0xb92 <malloc+0x12>
 b8e:	82 e0       	ldi	r24, 0x02	; 2
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	e0 91 77 05 	lds	r30, 0x0577	; 0x800577 <__flp>
 b96:	f0 91 78 05 	lds	r31, 0x0578	; 0x800578 <__flp+0x1>
 b9a:	20 e0       	ldi	r18, 0x00	; 0
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	a0 e0       	ldi	r26, 0x00	; 0
 ba0:	b0 e0       	ldi	r27, 0x00	; 0
 ba2:	30 97       	sbiw	r30, 0x00	; 0
 ba4:	19 f1       	breq	.+70     	; 0xbec <malloc+0x6c>
 ba6:	40 81       	ld	r20, Z
 ba8:	51 81       	ldd	r21, Z+1	; 0x01
 baa:	02 81       	ldd	r16, Z+2	; 0x02
 bac:	13 81       	ldd	r17, Z+3	; 0x03
 bae:	48 17       	cp	r20, r24
 bb0:	59 07       	cpc	r21, r25
 bb2:	c8 f0       	brcs	.+50     	; 0xbe6 <malloc+0x66>
 bb4:	84 17       	cp	r24, r20
 bb6:	95 07       	cpc	r25, r21
 bb8:	69 f4       	brne	.+26     	; 0xbd4 <malloc+0x54>
 bba:	10 97       	sbiw	r26, 0x00	; 0
 bbc:	31 f0       	breq	.+12     	; 0xbca <malloc+0x4a>
 bbe:	12 96       	adiw	r26, 0x02	; 2
 bc0:	0c 93       	st	X, r16
 bc2:	12 97       	sbiw	r26, 0x02	; 2
 bc4:	13 96       	adiw	r26, 0x03	; 3
 bc6:	1c 93       	st	X, r17
 bc8:	27 c0       	rjmp	.+78     	; 0xc18 <malloc+0x98>
 bca:	00 93 77 05 	sts	0x0577, r16	; 0x800577 <__flp>
 bce:	10 93 78 05 	sts	0x0578, r17	; 0x800578 <__flp+0x1>
 bd2:	22 c0       	rjmp	.+68     	; 0xc18 <malloc+0x98>
 bd4:	21 15       	cp	r18, r1
 bd6:	31 05       	cpc	r19, r1
 bd8:	19 f0       	breq	.+6      	; 0xbe0 <malloc+0x60>
 bda:	42 17       	cp	r20, r18
 bdc:	53 07       	cpc	r21, r19
 bde:	18 f4       	brcc	.+6      	; 0xbe6 <malloc+0x66>
 be0:	9a 01       	movw	r18, r20
 be2:	bd 01       	movw	r22, r26
 be4:	ef 01       	movw	r28, r30
 be6:	df 01       	movw	r26, r30
 be8:	f8 01       	movw	r30, r16
 bea:	db cf       	rjmp	.-74     	; 0xba2 <malloc+0x22>
 bec:	21 15       	cp	r18, r1
 bee:	31 05       	cpc	r19, r1
 bf0:	f9 f0       	breq	.+62     	; 0xc30 <malloc+0xb0>
 bf2:	28 1b       	sub	r18, r24
 bf4:	39 0b       	sbc	r19, r25
 bf6:	24 30       	cpi	r18, 0x04	; 4
 bf8:	31 05       	cpc	r19, r1
 bfa:	80 f4       	brcc	.+32     	; 0xc1c <malloc+0x9c>
 bfc:	8a 81       	ldd	r24, Y+2	; 0x02
 bfe:	9b 81       	ldd	r25, Y+3	; 0x03
 c00:	61 15       	cp	r22, r1
 c02:	71 05       	cpc	r23, r1
 c04:	21 f0       	breq	.+8      	; 0xc0e <malloc+0x8e>
 c06:	fb 01       	movw	r30, r22
 c08:	93 83       	std	Z+3, r25	; 0x03
 c0a:	82 83       	std	Z+2, r24	; 0x02
 c0c:	04 c0       	rjmp	.+8      	; 0xc16 <malloc+0x96>
 c0e:	90 93 78 05 	sts	0x0578, r25	; 0x800578 <__flp+0x1>
 c12:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <__flp>
 c16:	fe 01       	movw	r30, r28
 c18:	32 96       	adiw	r30, 0x02	; 2
 c1a:	44 c0       	rjmp	.+136    	; 0xca4 <malloc+0x124>
 c1c:	fe 01       	movw	r30, r28
 c1e:	e2 0f       	add	r30, r18
 c20:	f3 1f       	adc	r31, r19
 c22:	81 93       	st	Z+, r24
 c24:	91 93       	st	Z+, r25
 c26:	22 50       	subi	r18, 0x02	; 2
 c28:	31 09       	sbc	r19, r1
 c2a:	39 83       	std	Y+1, r19	; 0x01
 c2c:	28 83       	st	Y, r18
 c2e:	3a c0       	rjmp	.+116    	; 0xca4 <malloc+0x124>
 c30:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <__brkval>
 c34:	30 91 76 05 	lds	r19, 0x0576	; 0x800576 <__brkval+0x1>
 c38:	23 2b       	or	r18, r19
 c3a:	41 f4       	brne	.+16     	; 0xc4c <malloc+0xcc>
 c3c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c40:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c44:	30 93 76 05 	sts	0x0576, r19	; 0x800576 <__brkval+0x1>
 c48:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <__brkval>
 c4c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c50:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 c54:	21 15       	cp	r18, r1
 c56:	31 05       	cpc	r19, r1
 c58:	41 f4       	brne	.+16     	; 0xc6a <malloc+0xea>
 c5a:	2d b7       	in	r18, 0x3d	; 61
 c5c:	3e b7       	in	r19, 0x3e	; 62
 c5e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 c62:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 c66:	24 1b       	sub	r18, r20
 c68:	35 0b       	sbc	r19, r21
 c6a:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <__brkval>
 c6e:	f0 91 76 05 	lds	r31, 0x0576	; 0x800576 <__brkval+0x1>
 c72:	e2 17       	cp	r30, r18
 c74:	f3 07       	cpc	r31, r19
 c76:	a0 f4       	brcc	.+40     	; 0xca0 <malloc+0x120>
 c78:	2e 1b       	sub	r18, r30
 c7a:	3f 0b       	sbc	r19, r31
 c7c:	28 17       	cp	r18, r24
 c7e:	39 07       	cpc	r19, r25
 c80:	78 f0       	brcs	.+30     	; 0xca0 <malloc+0x120>
 c82:	ac 01       	movw	r20, r24
 c84:	4e 5f       	subi	r20, 0xFE	; 254
 c86:	5f 4f       	sbci	r21, 0xFF	; 255
 c88:	24 17       	cp	r18, r20
 c8a:	35 07       	cpc	r19, r21
 c8c:	48 f0       	brcs	.+18     	; 0xca0 <malloc+0x120>
 c8e:	4e 0f       	add	r20, r30
 c90:	5f 1f       	adc	r21, r31
 c92:	50 93 76 05 	sts	0x0576, r21	; 0x800576 <__brkval+0x1>
 c96:	40 93 75 05 	sts	0x0575, r20	; 0x800575 <__brkval>
 c9a:	81 93       	st	Z+, r24
 c9c:	91 93       	st	Z+, r25
 c9e:	02 c0       	rjmp	.+4      	; 0xca4 <malloc+0x124>
 ca0:	e0 e0       	ldi	r30, 0x00	; 0
 ca2:	f0 e0       	ldi	r31, 0x00	; 0
 ca4:	cf 01       	movw	r24, r30
 ca6:	df 91       	pop	r29
 ca8:	cf 91       	pop	r28
 caa:	1f 91       	pop	r17
 cac:	0f 91       	pop	r16
 cae:	08 95       	ret

00000cb0 <free>:
 cb0:	cf 93       	push	r28
 cb2:	df 93       	push	r29
 cb4:	00 97       	sbiw	r24, 0x00	; 0
 cb6:	09 f4       	brne	.+2      	; 0xcba <free+0xa>
 cb8:	81 c0       	rjmp	.+258    	; 0xdbc <free+0x10c>
 cba:	fc 01       	movw	r30, r24
 cbc:	32 97       	sbiw	r30, 0x02	; 2
 cbe:	13 82       	std	Z+3, r1	; 0x03
 cc0:	12 82       	std	Z+2, r1	; 0x02
 cc2:	a0 91 77 05 	lds	r26, 0x0577	; 0x800577 <__flp>
 cc6:	b0 91 78 05 	lds	r27, 0x0578	; 0x800578 <__flp+0x1>
 cca:	10 97       	sbiw	r26, 0x00	; 0
 ccc:	81 f4       	brne	.+32     	; 0xcee <free+0x3e>
 cce:	20 81       	ld	r18, Z
 cd0:	31 81       	ldd	r19, Z+1	; 0x01
 cd2:	82 0f       	add	r24, r18
 cd4:	93 1f       	adc	r25, r19
 cd6:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <__brkval>
 cda:	30 91 76 05 	lds	r19, 0x0576	; 0x800576 <__brkval+0x1>
 cde:	28 17       	cp	r18, r24
 ce0:	39 07       	cpc	r19, r25
 ce2:	51 f5       	brne	.+84     	; 0xd38 <free+0x88>
 ce4:	f0 93 76 05 	sts	0x0576, r31	; 0x800576 <__brkval+0x1>
 ce8:	e0 93 75 05 	sts	0x0575, r30	; 0x800575 <__brkval>
 cec:	67 c0       	rjmp	.+206    	; 0xdbc <free+0x10c>
 cee:	ed 01       	movw	r28, r26
 cf0:	20 e0       	ldi	r18, 0x00	; 0
 cf2:	30 e0       	ldi	r19, 0x00	; 0
 cf4:	ce 17       	cp	r28, r30
 cf6:	df 07       	cpc	r29, r31
 cf8:	40 f4       	brcc	.+16     	; 0xd0a <free+0x5a>
 cfa:	4a 81       	ldd	r20, Y+2	; 0x02
 cfc:	5b 81       	ldd	r21, Y+3	; 0x03
 cfe:	9e 01       	movw	r18, r28
 d00:	41 15       	cp	r20, r1
 d02:	51 05       	cpc	r21, r1
 d04:	f1 f0       	breq	.+60     	; 0xd42 <free+0x92>
 d06:	ea 01       	movw	r28, r20
 d08:	f5 cf       	rjmp	.-22     	; 0xcf4 <free+0x44>
 d0a:	d3 83       	std	Z+3, r29	; 0x03
 d0c:	c2 83       	std	Z+2, r28	; 0x02
 d0e:	40 81       	ld	r20, Z
 d10:	51 81       	ldd	r21, Z+1	; 0x01
 d12:	84 0f       	add	r24, r20
 d14:	95 1f       	adc	r25, r21
 d16:	c8 17       	cp	r28, r24
 d18:	d9 07       	cpc	r29, r25
 d1a:	59 f4       	brne	.+22     	; 0xd32 <free+0x82>
 d1c:	88 81       	ld	r24, Y
 d1e:	99 81       	ldd	r25, Y+1	; 0x01
 d20:	84 0f       	add	r24, r20
 d22:	95 1f       	adc	r25, r21
 d24:	02 96       	adiw	r24, 0x02	; 2
 d26:	91 83       	std	Z+1, r25	; 0x01
 d28:	80 83       	st	Z, r24
 d2a:	8a 81       	ldd	r24, Y+2	; 0x02
 d2c:	9b 81       	ldd	r25, Y+3	; 0x03
 d2e:	93 83       	std	Z+3, r25	; 0x03
 d30:	82 83       	std	Z+2, r24	; 0x02
 d32:	21 15       	cp	r18, r1
 d34:	31 05       	cpc	r19, r1
 d36:	29 f4       	brne	.+10     	; 0xd42 <free+0x92>
 d38:	f0 93 78 05 	sts	0x0578, r31	; 0x800578 <__flp+0x1>
 d3c:	e0 93 77 05 	sts	0x0577, r30	; 0x800577 <__flp>
 d40:	3d c0       	rjmp	.+122    	; 0xdbc <free+0x10c>
 d42:	e9 01       	movw	r28, r18
 d44:	fb 83       	std	Y+3, r31	; 0x03
 d46:	ea 83       	std	Y+2, r30	; 0x02
 d48:	49 91       	ld	r20, Y+
 d4a:	59 91       	ld	r21, Y+
 d4c:	c4 0f       	add	r28, r20
 d4e:	d5 1f       	adc	r29, r21
 d50:	ec 17       	cp	r30, r28
 d52:	fd 07       	cpc	r31, r29
 d54:	61 f4       	brne	.+24     	; 0xd6e <free+0xbe>
 d56:	80 81       	ld	r24, Z
 d58:	91 81       	ldd	r25, Z+1	; 0x01
 d5a:	84 0f       	add	r24, r20
 d5c:	95 1f       	adc	r25, r21
 d5e:	02 96       	adiw	r24, 0x02	; 2
 d60:	e9 01       	movw	r28, r18
 d62:	99 83       	std	Y+1, r25	; 0x01
 d64:	88 83       	st	Y, r24
 d66:	82 81       	ldd	r24, Z+2	; 0x02
 d68:	93 81       	ldd	r25, Z+3	; 0x03
 d6a:	9b 83       	std	Y+3, r25	; 0x03
 d6c:	8a 83       	std	Y+2, r24	; 0x02
 d6e:	e0 e0       	ldi	r30, 0x00	; 0
 d70:	f0 e0       	ldi	r31, 0x00	; 0
 d72:	12 96       	adiw	r26, 0x02	; 2
 d74:	8d 91       	ld	r24, X+
 d76:	9c 91       	ld	r25, X
 d78:	13 97       	sbiw	r26, 0x03	; 3
 d7a:	00 97       	sbiw	r24, 0x00	; 0
 d7c:	19 f0       	breq	.+6      	; 0xd84 <free+0xd4>
 d7e:	fd 01       	movw	r30, r26
 d80:	dc 01       	movw	r26, r24
 d82:	f7 cf       	rjmp	.-18     	; 0xd72 <free+0xc2>
 d84:	8d 91       	ld	r24, X+
 d86:	9c 91       	ld	r25, X
 d88:	11 97       	sbiw	r26, 0x01	; 1
 d8a:	9d 01       	movw	r18, r26
 d8c:	2e 5f       	subi	r18, 0xFE	; 254
 d8e:	3f 4f       	sbci	r19, 0xFF	; 255
 d90:	82 0f       	add	r24, r18
 d92:	93 1f       	adc	r25, r19
 d94:	20 91 75 05 	lds	r18, 0x0575	; 0x800575 <__brkval>
 d98:	30 91 76 05 	lds	r19, 0x0576	; 0x800576 <__brkval+0x1>
 d9c:	28 17       	cp	r18, r24
 d9e:	39 07       	cpc	r19, r25
 da0:	69 f4       	brne	.+26     	; 0xdbc <free+0x10c>
 da2:	30 97       	sbiw	r30, 0x00	; 0
 da4:	29 f4       	brne	.+10     	; 0xdb0 <free+0x100>
 da6:	10 92 78 05 	sts	0x0578, r1	; 0x800578 <__flp+0x1>
 daa:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <__flp>
 dae:	02 c0       	rjmp	.+4      	; 0xdb4 <free+0x104>
 db0:	13 82       	std	Z+3, r1	; 0x03
 db2:	12 82       	std	Z+2, r1	; 0x02
 db4:	b0 93 76 05 	sts	0x0576, r27	; 0x800576 <__brkval+0x1>
 db8:	a0 93 75 05 	sts	0x0575, r26	; 0x800575 <__brkval>
 dbc:	df 91       	pop	r29
 dbe:	cf 91       	pop	r28
 dc0:	08 95       	ret

00000dc2 <memset>:
 dc2:	dc 01       	movw	r26, r24
 dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <memset+0x6>
 dc6:	6d 93       	st	X+, r22
 dc8:	41 50       	subi	r20, 0x01	; 1
 dca:	50 40       	sbci	r21, 0x00	; 0
 dcc:	e0 f7       	brcc	.-8      	; 0xdc6 <memset+0x4>
 dce:	08 95       	ret

00000dd0 <_exit>:
 dd0:	f8 94       	cli

00000dd2 <__stop_program>:
 dd2:	ff cf       	rjmp	.-2      	; 0xdd2 <__stop_program>
