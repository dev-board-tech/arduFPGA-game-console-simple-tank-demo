
arduFPGA-3D.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000009fc  00000a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000042c  0080010a  0080010a  00000a9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000acc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e61  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012f4  00000000  00000000  00003b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001557  00000000  00000000  00004e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  00006378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e0b  00000000  00000000  000068b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028bf  00000000  00000000  000076bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00009f7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__bad_interrupt>
   6:	00 00       	nop
   8:	6c c0       	rjmp	.+216    	; 0xe2 <__bad_interrupt>
   a:	00 00       	nop
   c:	6a c0       	rjmp	.+212    	; 0xe2 <__bad_interrupt>
   e:	00 00       	nop
  10:	68 c0       	rjmp	.+208    	; 0xe2 <__bad_interrupt>
  12:	00 00       	nop
  14:	66 c0       	rjmp	.+204    	; 0xe2 <__bad_interrupt>
  16:	00 00       	nop
  18:	64 c0       	rjmp	.+200    	; 0xe2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	62 c0       	rjmp	.+196    	; 0xe2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	60 c0       	rjmp	.+192    	; 0xe2 <__bad_interrupt>
  22:	00 00       	nop
  24:	5e c0       	rjmp	.+188    	; 0xe2 <__bad_interrupt>
  26:	00 00       	nop
  28:	5c c0       	rjmp	.+184    	; 0xe2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5a c0       	rjmp	.+180    	; 0xe2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	58 c0       	rjmp	.+176    	; 0xe2 <__bad_interrupt>
  32:	00 00       	nop
  34:	56 c0       	rjmp	.+172    	; 0xe2 <__bad_interrupt>
  36:	00 00       	nop
  38:	54 c0       	rjmp	.+168    	; 0xe2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	52 c0       	rjmp	.+164    	; 0xe2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	50 c0       	rjmp	.+160    	; 0xe2 <__bad_interrupt>
  42:	00 00       	nop
  44:	4e c0       	rjmp	.+156    	; 0xe2 <__bad_interrupt>
  46:	00 00       	nop
  48:	4c c0       	rjmp	.+152    	; 0xe2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4a c0       	rjmp	.+148    	; 0xe2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	48 c0       	rjmp	.+144    	; 0xe2 <__bad_interrupt>
  52:	00 00       	nop
  54:	46 c0       	rjmp	.+140    	; 0xe2 <__bad_interrupt>
  56:	00 00       	nop
  58:	44 c0       	rjmp	.+136    	; 0xe2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	42 c0       	rjmp	.+132    	; 0xe2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	40 c0       	rjmp	.+128    	; 0xe2 <__bad_interrupt>
  62:	00 00       	nop
  64:	3e c0       	rjmp	.+124    	; 0xe2 <__bad_interrupt>
  66:	00 00       	nop
  68:	3c c0       	rjmp	.+120    	; 0xe2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3a c0       	rjmp	.+116    	; 0xe2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	38 c0       	rjmp	.+112    	; 0xe2 <__bad_interrupt>
  72:	00 00       	nop
  74:	36 c0       	rjmp	.+108    	; 0xe2 <__bad_interrupt>
  76:	00 00       	nop
  78:	34 c0       	rjmp	.+104    	; 0xe2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	30 c0       	rjmp	.+96     	; 0xe2 <__bad_interrupt>
  82:	00 00       	nop
  84:	2e c0       	rjmp	.+92     	; 0xe2 <__bad_interrupt>
  86:	00 00       	nop
  88:	2c c0       	rjmp	.+88     	; 0xe2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a c0       	rjmp	.+84     	; 0xe2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	28 c0       	rjmp	.+80     	; 0xe2 <__bad_interrupt>
  92:	00 00       	nop
  94:	26 c0       	rjmp	.+76     	; 0xe2 <__bad_interrupt>
  96:	00 00       	nop
  98:	24 c0       	rjmp	.+72     	; 0xe2 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	22 c0       	rjmp	.+68     	; 0xe2 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	20 c0       	rjmp	.+64     	; 0xe2 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	1c c0       	rjmp	.+56     	; 0xe2 <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ec ef       	ldi	r30, 0xFC	; 252
  c0:	f9 e0       	ldi	r31, 0x09	; 9
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 30       	cpi	r26, 0x0A	; 10
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	25 e0       	ldi	r18, 0x05	; 5
  d0:	aa e0       	ldi	r26, 0x0A	; 10
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a6 33       	cpi	r26, 0x36	; 54
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	44 d2       	rcall	.+1160   	; 0x568 <main>
  e0:	8b c4       	rjmp	.+2326   	; 0x9f8 <_exit>

000000e2 <__bad_interrupt>:
  e2:	8e cf       	rjmp	.-228    	; 0x0 <__vectors>

000000e4 <delay_ms>:
	if(us_ < 0)
		return;
	while(us_--);
}

void delay_ms(uint16_t ms) {
  e4:	a4 e0       	ldi	r26, 0x04	; 4
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e7 e7       	ldi	r30, 0x77	; 119
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	1c c3       	rjmp	.+1592   	; 0x726 <__prologue_saves__+0x20>
	volatile int32_t ms_ = (ms * (F_CPU / 1000 / 37)) - 50;
  ee:	9c 01       	movw	r18, r24
  f0:	a0 eb       	ldi	r26, 0xB0	; 176
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	f9 d2       	rcall	.+1522   	; 0x6e8 <__umulhisi3>
  f6:	dc 01       	movw	r26, r24
  f8:	cb 01       	movw	r24, r22
  fa:	c2 97       	sbiw	r24, 0x32	; 50
  fc:	a1 09       	sbc	r26, r1
  fe:	b1 09       	sbc	r27, r1
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	9a 83       	std	Y+2, r25	; 0x02
 104:	ab 83       	std	Y+3, r26	; 0x03
 106:	bc 83       	std	Y+4, r27	; 0x04
	if(ms_ < 0)
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	9a 81       	ldd	r25, Y+2	; 0x02
 10c:	ab 81       	ldd	r26, Y+3	; 0x03
 10e:	bc 81       	ldd	r27, Y+4	; 0x04
 110:	b7 fd       	sbrc	r27, 7
 112:	12 c0       	rjmp	.+36     	; 0x138 <delay_ms+0x54>
		return;
	while(ms_--);
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	ab 81       	ldd	r26, Y+3	; 0x03
 11a:	bc 81       	ldd	r27, Y+4	; 0x04
 11c:	ac 01       	movw	r20, r24
 11e:	bd 01       	movw	r22, r26
 120:	41 50       	subi	r20, 0x01	; 1
 122:	51 09       	sbc	r21, r1
 124:	61 09       	sbc	r22, r1
 126:	71 09       	sbc	r23, r1
 128:	49 83       	std	Y+1, r20	; 0x01
 12a:	5a 83       	std	Y+2, r21	; 0x02
 12c:	6b 83       	std	Y+3, r22	; 0x03
 12e:	7c 83       	std	Y+4, r23	; 0x04
 130:	89 2b       	or	r24, r25
 132:	8a 2b       	or	r24, r26
 134:	8b 2b       	or	r24, r27
 136:	71 f7       	brne	.-36     	; 0x114 <delay_ms+0x30>
}
 138:	24 96       	adiw	r28, 0x04	; 4
 13a:	e2 e0       	ldi	r30, 0x02	; 2
 13c:	10 c3       	rjmp	.+1568   	; 0x75e <__epilogue_restores__+0x20>

0000013e <ssd1306_wr_cmd>:
	return 128;
}

uint16_t ssd1306_get_y(void) {
	return 64;
}
 13e:	5c 98       	cbi	0x0b, 4	; 11
 140:	5e 98       	cbi	0x0b, 6	; 11
 142:	94 c0       	rjmp	.+296    	; 0x26c <spi_wrd_byte>
 144:	08 95       	ret

00000146 <ssd1306_on>:
#endif
	ssd1306_on(inst, true);
}

void ssd1306_on(spi_t *inst, bool state) {
	ssd1306_wr_cmd(inst, state ? 0xAF : 0xAE);
 146:	61 11       	cpse	r22, r1
 148:	02 c0       	rjmp	.+4      	; 0x14e <ssd1306_on+0x8>
 14a:	6e ea       	ldi	r22, 0xAE	; 174
 14c:	01 c0       	rjmp	.+2      	; 0x150 <ssd1306_on+0xa>
 14e:	6f ea       	ldi	r22, 0xAF	; 175
 150:	f6 df       	rcall	.-20     	; 0x13e <ssd1306_wr_cmd>
	SPI_SSD1306_CS_DEASSERT();
 152:	5e 9a       	sbi	0x0b, 6	; 11
 154:	08 95       	ret

00000156 <ssd1306_rfsh>:

uint16_t ssd1306_get_y(void) {
	return 64;
}

void ssd1306_rfsh(spi_t *inst, uint8_t *buf) {
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ec 01       	movw	r28, r24
 160:	8b 01       	movw	r16, r22
	/* Set start line */
	//ssd1306_wr_cmd(0x40);

#ifndef SSD1306_USE_NO_BUF
	SPI_SSD1306_CS_ASSERT();
 162:	5e 98       	cbi	0x0b, 6	; 11
	ssd1306_wr_cmd(inst, 0x21);
 164:	61 e2       	ldi	r22, 0x21	; 33
 166:	eb df       	rcall	.-42     	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x00);
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	ce 01       	movw	r24, r28
 16c:	e8 df       	rcall	.-48     	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x7F);
 16e:	6f e7       	ldi	r22, 0x7F	; 127
 170:	ce 01       	movw	r24, r28
 172:	e5 df       	rcall	.-54     	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x22);
 174:	62 e2       	ldi	r22, 0x22	; 34
 176:	ce 01       	movw	r24, r28
 178:	e2 df       	rcall	.-60     	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x00);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	ce 01       	movw	r24, r28
 17e:	df df       	rcall	.-66     	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x07);
 180:	67 e0       	ldi	r22, 0x07	; 7
 182:	ce 01       	movw	r24, r28
 184:	dc df       	rcall	.-72     	; 0x13e <ssd1306_wr_cmd>
	SSD1306_DC_PORT |= SSD1306_DC_PIN;
 186:	5c 9a       	sbi	0x0b, 4	; 11
	spi_wr_buf(inst, buf, 1024);
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	54 e0       	ldi	r21, 0x04	; 4
 18c:	b8 01       	movw	r22, r16
 18e:	ce 01       	movw	r24, r28
 190:	7b d0       	rcall	.+246    	; 0x288 <spi_wr_buf>
	SPI_SSD1306_CS_DEASSERT();
 192:	5e 9a       	sbi	0x0b, 6	; 11
#endif
	ssd1306_on(inst, true);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	ce 01       	movw	r24, r28
 198:	d6 df       	rcall	.-84     	; 0x146 <ssd1306_on>
 19a:	df 91       	pop	r29
}
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <ssd1306_init>:
 1a4:	0f 93       	push	r16
	0b01000000,
	0b10000000
};
#endif

void ssd1306_init(spi_t *inst, uint8_t *buf) {
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
 1ae:	8b 01       	movw	r16, r22
	SSD1306_DC_DIR |= SSD1306_DC_PIN;
 1b0:	54 9a       	sbi	0x0a, 4	; 10
	SSD1306_RST_DIR |= SSD1306_RST_PIN;
 1b2:	57 9a       	sbi	0x0a, 7	; 10
	SSD1306_RST_PORT &= ~SSD1306_RST_PIN;
 1b4:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(2);
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	94 df       	rcall	.-216    	; 0xe4 <delay_ms>
	SSD1306_RST_PORT |= SSD1306_RST_PIN;
 1bc:	5f 9a       	sbi	0x0b, 7	; 11
	delay_ms(10);
 1be:	8a e0       	ldi	r24, 0x0A	; 10
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 df       	rcall	.-224    	; 0xe4 <delay_ms>

	ssd1306_wr_cmd(inst, SSD1306_DISPLAYOFF);
 1c4:	6e ea       	ldi	r22, 0xAE	; 174
 1c6:	ce 01       	movw	r24, r28
 1c8:	ba df       	rcall	.-140    	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_SETDISPLAYCLOCKDIV);
 1ca:	65 ed       	ldi	r22, 0xD5	; 213
 1cc:	ce 01       	movw	r24, r28
 1ce:	b7 df       	rcall	.-146    	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0xF0);
 1d0:	60 ef       	ldi	r22, 0xF0	; 240
 1d2:	ce 01       	movw	r24, r28
 1d4:	b4 df       	rcall	.-152    	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_CHARGEPUMP);
 1d6:	6d e8       	ldi	r22, 0x8D	; 141
 1d8:	ce 01       	movw	r24, r28
 1da:	b1 df       	rcall	.-158    	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x14);
 1dc:	64 e1       	ldi	r22, 0x14	; 20
 1de:	ce 01       	movw	r24, r28
 1e0:	ae df       	rcall	.-164    	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_SEGREMAP | 0x1);
 1e2:	61 ea       	ldi	r22, 0xA1	; 161
 1e4:	ce 01       	movw	r24, r28
 1e6:	ab df       	rcall	.-170    	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_COMSCANDEC);
 1e8:	68 ec       	ldi	r22, 0xC8	; 200
 1ea:	ce 01       	movw	r24, r28
 1ec:	a8 df       	rcall	.-176    	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_SETCONTRAST);
 1ee:	61 e8       	ldi	r22, 0x81	; 129
 1f0:	ce 01       	movw	r24, r28
 1f2:	a5 df       	rcall	.-182    	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0x8F);
 1f4:	6f e8       	ldi	r22, 0x8F	; 143
 1f6:	ce 01       	movw	r24, r28
 1f8:	a2 df       	rcall	.-188    	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_SETPRECHARGE);
 1fa:	69 ed       	ldi	r22, 0xD9	; 217
 1fc:	ce 01       	movw	r24, r28
 1fe:	9f df       	rcall	.-194    	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, 0xF1);
 200:	61 ef       	ldi	r22, 0xF1	; 241
 202:	ce 01       	movw	r24, r28
 204:	9c df       	rcall	.-200    	; 0x13e <ssd1306_wr_cmd>
	ssd1306_wr_cmd(inst, SSD1306_MEMORYMODE);
 206:	60 e2       	ldi	r22, 0x20	; 32
 208:	ce 01       	movw	r24, r28
 20a:	99 df       	rcall	.-206    	; 0x13e <ssd1306_wr_cmd>
 20c:	60 e0       	ldi	r22, 0x00	; 0
	ssd1306_wr_cmd(inst, 0x00);
 20e:	ce 01       	movw	r24, r28
 210:	96 df       	rcall	.-212    	; 0x13e <ssd1306_wr_cmd>
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	90 e0       	ldi	r25, 0x00	; 0

	delay_ms(2);
 216:	66 df       	rcall	.-308    	; 0xe4 <delay_ms>
 218:	6f ea       	ldi	r22, 0xAF	; 175
 21a:	ce 01       	movw	r24, r28
	ssd1306_wr_cmd(inst, SSD1306_DISPLAYON);
 21c:	90 df       	rcall	.-224    	; 0x13e <ssd1306_wr_cmd>
 21e:	b8 01       	movw	r22, r16
 220:	c8 01       	movw	r24, r16
 222:	9c 5f       	subi	r25, 0xFC	; 252
 224:	fb 01       	movw	r30, r22
 226:	11 92       	st	Z+, r1
 228:	bf 01       	movw	r22, r30
	SSD1306_DC_PORT |= SSD1306_DC_PIN;
#endif
	for(uint16_t cnt = 1024; cnt > 0; cnt--)
	{
#ifndef SSD1306_USE_NO_BUF
		*buf++ = 0x00;
 22a:	e8 17       	cp	r30, r24
 22c:	f9 07       	cpc	r31, r25
 22e:	d1 f7       	brne	.-12     	; 0x224 <ssd1306_init+0x80>
	ssd1306_wr_cmd(inst, 0x22);
	ssd1306_wr_cmd(inst, 0x00);
	ssd1306_wr_cmd(inst, 0x07);
	SSD1306_DC_PORT |= SSD1306_DC_PIN;
#endif
	for(uint16_t cnt = 1024; cnt > 0; cnt--)
 230:	5e 9a       	sbi	0x0b, 6	; 11
 232:	ce 01       	movw	r24, r28
 234:	90 df       	rcall	.-224    	; 0x156 <ssd1306_rfsh>
		*buf++ = 0x00;
#else
		spi_wrd_byte(inst, 0x00);
#endif
	}
	SPI_SSD1306_CS_DEASSERT();
 236:	df 91       	pop	r29
	ssd1306_rfsh(inst, buf);
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
}
 23e:	08 95       	ret

00000240 <spi_init>:
 240:	56 9a       	sbi	0x0a, 6	; 10
 242:	52 9a       	sbi	0x0a, 2	; 10
 244:	23 9a       	sbi	0x04, 3	; 4
 246:	08 9a       	sbi	0x01, 0	; 1

void spi_wrd_buf(spi_t *inst, uint8_t *rx_buf, uint8_t *tx_buf, uint16_t count) {
	while(count--) {
		*rx_buf++ = spi_wrd_byte(inst, *tx_buf++);
	}
}
 248:	09 9a       	sbi	0x01, 1	; 1
 24a:	20 9a       	sbi	0x04, 0	; 4
 24c:	55 9a       	sbi	0x0a, 5	; 10
 24e:	21 9a       	sbi	0x04, 1	; 4
 250:	22 9a       	sbi	0x04, 2	; 4
 252:	dc 01       	movw	r26, r24
 254:	ed 91       	ld	r30, X+
 256:	fc 91       	ld	r31, X
 258:	11 97       	sbiw	r26, 0x01	; 1
 25a:	20 e5       	ldi	r18, 0x50	; 80
 25c:	20 83       	st	Z, r18
 25e:	12 96       	adiw	r26, 0x02	; 2
 260:	ed 91       	ld	r30, X+
 262:	fc 91       	ld	r31, X
 264:	13 97       	sbiw	r26, 0x03	; 3
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 83       	st	Z, r24
 26a:	08 95       	ret

0000026c <spi_wrd_byte>:
 26c:	fc 01       	movw	r30, r24
 26e:	a4 81       	ldd	r26, Z+4	; 0x04
 270:	b5 81       	ldd	r27, Z+5	; 0x05
 272:	6c 93       	st	X, r22
 274:	a2 81       	ldd	r26, Z+2	; 0x02
 276:	b3 81       	ldd	r27, Z+3	; 0x03
 278:	8c 91       	ld	r24, X
 27a:	87 ff       	sbrs	r24, 7
 27c:	fd cf       	rjmp	.-6      	; 0x278 <spi_wrd_byte+0xc>
 27e:	04 80       	ldd	r0, Z+4	; 0x04
 280:	f5 81       	ldd	r31, Z+5	; 0x05
 282:	e0 2d       	mov	r30, r0
 284:	80 81       	ld	r24, Z
 286:	08 95       	ret

00000288 <spi_wr_buf>:

void spi_wr_buf(spi_t *inst, uint8_t *tx_buf, uint16_t count) {
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	7c 01       	movw	r14, r24
 296:	eb 01       	movw	r28, r22
 298:	8b 01       	movw	r16, r22
 29a:	04 0f       	add	r16, r20
 29c:	15 1f       	adc	r17, r21
	while(count--) {
 29e:	c0 17       	cp	r28, r16
 2a0:	d1 07       	cpc	r29, r17
 2a2:	21 f0       	breq	.+8      	; 0x2ac <spi_wr_buf+0x24>
		spi_wrd_byte(inst, *tx_buf++);
 2a4:	69 91       	ld	r22, Y+
 2a6:	c7 01       	movw	r24, r14
 2a8:	e1 df       	rcall	.-62     	; 0x26c <spi_wrd_byte>
 2aa:	f9 cf       	rjmp	.-14     	; 0x29e <spi_wr_buf+0x16>
	}
}
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	e6 e0       	ldi	r30, 0x06	; 6
 2b2:	51 c2       	rjmp	.+1186   	; 0x756 <__epilogue_restores__+0x18>

000002b4 <wr>:
		baud = 255;
	*inst->baud = baud;
	*inst->ctrla = FPGA_TWI_MASTER_ENABLE_bm;
}

static twiErrCode_e wr(twi_t *inst, uint8_t slaveAddr, uint8_t* bufSend, uint8_t lenSend, uint8_t* bufRec, uint16_t lenRec) {
 2b4:	ef 92       	push	r14
 2b6:	ff 92       	push	r15
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	fc 01       	movw	r30, r24
	unsigned int cnt_bytes;
	if(lenSend)
 2c2:	22 23       	and	r18, r18
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <wr+0x14>
 2c6:	79 c0       	rjmp	.+242    	; 0x3ba <wr+0x106>
	{
		*inst->data = slaveAddr;
 2c8:	a2 85       	ldd	r26, Z+10	; 0x0a
 2ca:	b3 85       	ldd	r27, Z+11	; 0x0b
 2cc:	6c 93       	st	X, r22
		while ((*inst->status & FPGA_TWI_MASTER_WIF_bm) == 0);
 2ce:	a6 81       	ldd	r26, Z+6	; 0x06
 2d0:	b7 81       	ldd	r27, Z+7	; 0x07
 2d2:	8c 91       	ld	r24, X
 2d4:	86 ff       	sbrs	r24, 6
 2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <wr+0x1e>
		if(*inst->status & FPGA_TWI_MASTER_RXACK_bm)
 2d8:	8c 91       	ld	r24, X
 2da:	84 fd       	sbrc	r24, 4
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <wr+0x30>
 2de:	ea 01       	movw	r28, r20
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
			while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
			return twiErr_Nack;
		}
		for(cnt_bytes = 0; cnt_bytes < lenSend; cnt_bytes++)
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	0c c0       	rjmp	.+24     	; 0x2fc <wr+0x48>
	{
		*inst->data = slaveAddr;
		while ((*inst->status & FPGA_TWI_MASTER_WIF_bm) == 0);
		if(*inst->status & FPGA_TWI_MASTER_RXACK_bm)
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
 2e4:	a4 81       	ldd	r26, Z+4	; 0x04
 2e6:	b5 81       	ldd	r27, Z+5	; 0x05
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	8c 93       	st	X, r24
			while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
 2ec:	04 80       	ldd	r0, Z+4	; 0x04
 2ee:	f5 81       	ldd	r31, Z+5	; 0x05
 2f0:	e0 2d       	mov	r30, r0
 2f2:	80 81       	ld	r24, Z
 2f4:	83 70       	andi	r24, 0x03	; 3
 2f6:	e9 f7       	brne	.-6      	; 0x2f2 <wr+0x3e>
			return twiErr_Nack;
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	6c c0       	rjmp	.+216    	; 0x3d4 <wr+0x120>
		}
		for(cnt_bytes = 0; cnt_bytes < lenSend; cnt_bytes++)
 2fc:	ce 01       	movw	r24, r28
 2fe:	84 1b       	sub	r24, r20
 300:	95 0b       	sbc	r25, r21
 302:	82 17       	cp	r24, r18
 304:	93 07       	cpc	r25, r19
 306:	b8 f4       	brcc	.+46     	; 0x336 <wr+0x82>
		{
			*inst->data = *bufSend++;
 308:	a2 85       	ldd	r26, Z+10	; 0x0a
 30a:	b3 85       	ldd	r27, Z+11	; 0x0b
 30c:	89 91       	ld	r24, Y+
 30e:	8c 93       	st	X, r24
			while ((*inst->status & FPGA_TWI_MASTER_WIF_bm) == 0);
 310:	a6 81       	ldd	r26, Z+6	; 0x06
 312:	b7 81       	ldd	r27, Z+7	; 0x07
 314:	8c 91       	ld	r24, X
 316:	86 ff       	sbrs	r24, 6
 318:	fd cf       	rjmp	.-6      	; 0x314 <wr+0x60>
			if(*inst->status & FPGA_TWI_MASTER_RXACK_bm)
 31a:	8c 91       	ld	r24, X
 31c:	84 ff       	sbrs	r24, 4
 31e:	ee cf       	rjmp	.-36     	; 0x2fc <wr+0x48>
			{
				*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
 320:	a4 81       	ldd	r26, Z+4	; 0x04
 322:	b5 81       	ldd	r27, Z+5	; 0x05
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	8c 93       	st	X, r24
				while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
 328:	04 80       	ldd	r0, Z+4	; 0x04
 32a:	f5 81       	ldd	r31, Z+5	; 0x05
 32c:	e0 2d       	mov	r30, r0
 32e:	80 81       	ld	r24, Z
 330:	83 70       	andi	r24, 0x03	; 3
 332:	e9 f7       	brne	.-6      	; 0x32e <wr+0x7a>
 334:	e1 cf       	rjmp	.-62     	; 0x2f8 <wr+0x44>
				return twiErr_Nack;
			}
		}
	}
	if(lenRec)
 336:	e1 14       	cp	r14, r1
 338:	f1 04       	cpc	r15, r1
 33a:	09 f4       	brne	.+2      	; 0x33e <wr+0x8a>
 33c:	41 c0       	rjmp	.+130    	; 0x3c0 <wr+0x10c>
	{
		if(lenSend)
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_REPSTART_gc;
 33e:	a4 81       	ldd	r26, Z+4	; 0x04
 340:	b5 81       	ldd	r27, Z+5	; 0x05
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	8c 93       	st	X, r24
			while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
 346:	a4 81       	ldd	r26, Z+4	; 0x04
 348:	b5 81       	ldd	r27, Z+5	; 0x05
 34a:	8c 91       	ld	r24, X
 34c:	83 70       	andi	r24, 0x03	; 3
 34e:	e9 f7       	brne	.-6      	; 0x34a <wr+0x96>
		}
		*inst->data = slaveAddr | 0x01;
 350:	a2 85       	ldd	r26, Z+10	; 0x0a
 352:	b3 85       	ldd	r27, Z+11	; 0x0b
 354:	61 60       	ori	r22, 0x01	; 1
 356:	6c 93       	st	X, r22
		while ((*inst->status & FPGA_TWI_MASTER_WIF_bm) == 0);
 358:	a6 81       	ldd	r26, Z+6	; 0x06
 35a:	b7 81       	ldd	r27, Z+7	; 0x07
 35c:	8c 91       	ld	r24, X
 35e:	86 ff       	sbrs	r24, 6
 360:	fd cf       	rjmp	.-6      	; 0x35c <wr+0xa8>
		if(*inst->status & FPGA_TWI_MASTER_RXACK_bm)
 362:	8c 91       	ld	r24, X
 364:	84 fd       	sbrc	r24, 4
 366:	07 c0       	rjmp	.+14     	; 0x376 <wr+0xc2>
 368:	d8 01       	movw	r26, r16
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
			while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
			return twiErr_Nack;
		}
		for(cnt_bytes = 0; cnt_bytes < lenRec; cnt_bytes++)
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_RECVTRANS_gc | ((cnt_bytes == lenRec - 1) ? FPGA_TWI_MASTER_ACKACT_bm : 0 );
 36e:	a7 01       	movw	r20, r14
 370:	41 50       	subi	r20, 0x01	; 1
 372:	51 09       	sbc	r21, r1
 374:	1c c0       	rjmp	.+56     	; 0x3ae <wr+0xfa>
		}
		*inst->data = slaveAddr | 0x01;
		while ((*inst->status & FPGA_TWI_MASTER_WIF_bm) == 0);
		if(*inst->status & FPGA_TWI_MASTER_RXACK_bm)
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
 376:	a4 81       	ldd	r26, Z+4	; 0x04
 378:	b5 81       	ldd	r27, Z+5	; 0x05
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	8c 93       	st	X, r24
			while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
 37e:	04 80       	ldd	r0, Z+4	; 0x04
 380:	f5 81       	ldd	r31, Z+5	; 0x05
 382:	e0 2d       	mov	r30, r0
 384:	80 81       	ld	r24, Z
 386:	83 70       	andi	r24, 0x03	; 3
 388:	e9 f7       	brne	.-6      	; 0x384 <wr+0xd0>
 38a:	b6 cf       	rjmp	.-148    	; 0x2f8 <wr+0x44>
			return twiErr_Nack;
		}
		for(cnt_bytes = 0; cnt_bytes < lenRec; cnt_bytes++)
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_RECVTRANS_gc | ((cnt_bytes == lenRec - 1) ? FPGA_TWI_MASTER_ACKACT_bm : 0 );
 38c:	c4 81       	ldd	r28, Z+4	; 0x04
 38e:	d5 81       	ldd	r29, Z+5	; 0x05
 390:	84 17       	cp	r24, r20
 392:	95 07       	cpc	r25, r21
 394:	81 f0       	breq	.+32     	; 0x3b6 <wr+0x102>
 396:	22 e0       	ldi	r18, 0x02	; 2
 398:	28 83       	st	Y, r18
			while ((*inst->status & FPGA_TWI_MASTER_RIF_bm) == 0);
 39a:	c6 81       	ldd	r28, Z+6	; 0x06
 39c:	d7 81       	ldd	r29, Z+7	; 0x07
 39e:	28 81       	ld	r18, Y
 3a0:	27 ff       	sbrs	r18, 7
 3a2:	fd cf       	rjmp	.-6      	; 0x39e <wr+0xea>
			*bufRec++ = *inst->data;
 3a4:	c2 85       	ldd	r28, Z+10	; 0x0a
 3a6:	d3 85       	ldd	r29, Z+11	; 0x0b
 3a8:	28 81       	ld	r18, Y
 3aa:	2d 93       	st	X+, r18
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
			while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
			return twiErr_Nack;
		}
		for(cnt_bytes = 0; cnt_bytes < lenRec; cnt_bytes++)
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	8e 15       	cp	r24, r14
 3b0:	9f 05       	cpc	r25, r15
 3b2:	61 f7       	brne	.-40     	; 0x38c <wr+0xd8>
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <wr+0x10c>
		{
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_RECVTRANS_gc | ((cnt_bytes == lenRec - 1) ? FPGA_TWI_MASTER_ACKACT_bm : 0 );
 3b6:	26 e0       	ldi	r18, 0x06	; 6
 3b8:	ef cf       	rjmp	.-34     	; 0x398 <wr+0xe4>
				while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
				return twiErr_Nack;
			}
		}
	}
	if(lenRec)
 3ba:	e1 14       	cp	r14, r1
 3bc:	f1 04       	cpc	r15, r1
 3be:	41 f6       	brne	.-112    	; 0x350 <wr+0x9c>
			*inst->ctrlc = FPGA_TWI_MASTER_CMD_RECVTRANS_gc | ((cnt_bytes == lenRec - 1) ? FPGA_TWI_MASTER_ACKACT_bm : 0 );
			while ((*inst->status & FPGA_TWI_MASTER_RIF_bm) == 0);
			*bufRec++ = *inst->data;
		}
	}
	*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
 3c0:	a4 81       	ldd	r26, Z+4	; 0x04
 3c2:	b5 81       	ldd	r27, Z+5	; 0x05
 3c4:	83 e0       	ldi	r24, 0x03	; 3
 3c6:	8c 93       	st	X, r24
	while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
 3c8:	04 80       	ldd	r0, Z+4	; 0x04
 3ca:	f5 81       	ldd	r31, Z+5	; 0x05
 3cc:	e0 2d       	mov	r30, r0
 3ce:	80 81       	ld	r24, Z
 3d0:	83 70       	andi	r24, 0x03	; 3
 3d2:	e9 f7       	brne	.-6      	; 0x3ce <wr+0x11a>
	return twiErr_Ok;
}
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	e6 e0       	ldi	r30, 0x06	; 6
 3da:	bd c1       	rjmp	.+890    	; 0x756 <__epilogue_restores__+0x18>

000003dc <twi_init>:
#include <stdio.h>

#include "def.h"
#include "twi_s.h"

void twi_init(twi_t *inst, uint32_t twiFreq) {
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
	unsigned int baud = (F_CPU / (twiFreq * 2)) - 1;
 3e2:	9a 01       	movw	r18, r20
 3e4:	ab 01       	movw	r20, r22
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	44 1f       	adc	r20, r20
 3ec:	55 1f       	adc	r21, r21
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	74 e2       	ldi	r23, 0x24	; 36
 3f2:	84 ef       	ldi	r24, 0xF4	; 244
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	3a d1       	rcall	.+628    	; 0x66c <__udivmodsi4>
 3f8:	21 50       	subi	r18, 0x01	; 1
 3fa:	31 09       	sbc	r19, r1
	if(baud > 255)
		baud = 255;
	*inst->baud = baud;
 3fc:	e8 85       	ldd	r30, Y+8	; 0x08
 3fe:	f9 85       	ldd	r31, Y+9	; 0x09
 400:	2f 3f       	cpi	r18, 0xFF	; 255
 402:	31 05       	cpc	r19, r1
 404:	19 f0       	breq	.+6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 406:	10 f0       	brcs	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 408:	2f ef       	ldi	r18, 0xFF	; 255
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	20 83       	st	Z, r18
	*inst->ctrla = FPGA_TWI_MASTER_ENABLE_bm;
 40e:	e8 81       	ld	r30, Y
 410:	f9 81       	ldd	r31, Y+1	; 0x01
 412:	88 e0       	ldi	r24, 0x08	; 8
 414:	80 83       	st	Z, r24
}
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <twi_writeBytes>:
	*inst->ctrlc = FPGA_TWI_MASTER_CMD_STOP_gc;
	while ((*inst->ctrlc & FPGA_TWI_MASTER_CMD_gm) != 0);
	return twiErr_Ok;
}

int8_t twi_writeBytes(twi_t *inst, uint8_t slaveAddr, uint8_t* buf, uint8_t len) {
 41c:	ef 92       	push	r14
 41e:	ff 92       	push	r15
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
	if (!inst)
 424:	00 97       	sbiw	r24, 0x00	; 0
 426:	39 f0       	breq	.+14     	; 0x436 <twi_writeBytes+0x1a>
		return twiErr_InvalidParam;
	return wr(inst, slaveAddr << 1, buf, len, NULL, 0);
 428:	66 0f       	add	r22, r22
 42a:	e1 2c       	mov	r14, r1
 42c:	f1 2c       	mov	r15, r1
 42e:	00 e0       	ldi	r16, 0x00	; 0
 430:	10 e0       	ldi	r17, 0x00	; 0
 432:	40 df       	rcall	.-384    	; 0x2b4 <wr>
 434:	01 c0       	rjmp	.+2      	; 0x438 <twi_writeBytes+0x1c>
	return twiErr_Ok;
}

int8_t twi_writeBytes(twi_t *inst, uint8_t slaveAddr, uint8_t* buf, uint8_t len) {
	if (!inst)
		return twiErr_InvalidParam;
 436:	81 e0       	ldi	r24, 0x01	; 1
	return wr(inst, slaveAddr << 1, buf, len, NULL, 0);
}
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	ff 90       	pop	r15
 43e:	ef 90       	pop	r14
 440:	08 95       	ret

00000442 <freeNove_ThreeWeled_init>:
freeNove_ThreeWeled_t *freeNove_ThreeWeled_deinit(freeNove_ThreeWeled_t *freeNoveInst) {
	if(freeNoveInst) {
		free(freeNoveInst);
	}
	return (freeNove_ThreeWeled_t*)0;
}
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	ec 01       	movw	r28, r24
 448:	65 e1       	ldi	r22, 0x15	; 21
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	91 d1       	rcall	.+802    	; 0x774 <calloc>
 452:	fc 01       	movw	r30, r24
 454:	89 2b       	or	r24, r25
 456:	19 f1       	breq	.+70     	; 0x49e <freeNove_ThreeWeled_init+0x5c>
 458:	20 97       	sbiw	r28, 0x00	; 0
 45a:	29 f4       	brne	.+10     	; 0x466 <freeNove_ThreeWeled_init+0x24>
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	91 83       	std	Z+1, r25	; 0x01
 462:	80 83       	st	Z, r24
 464:	1a c0       	rjmp	.+52     	; 0x49a <freeNove_ThreeWeled_init+0x58>
 466:	d3 83       	std	Z+3, r29	; 0x03
 468:	c2 83       	std	Z+2, r28	; 0x02
 46a:	88 e1       	ldi	r24, 0x18	; 24
 46c:	84 83       	std	Z+4, r24	; 0x04
 46e:	11 82       	std	Z+1, r1	; 0x01
 470:	10 82       	st	Z, r1
 472:	2c eb       	ldi	r18, 0xBC	; 188
 474:	32 e0       	ldi	r19, 0x02	; 2
 476:	36 83       	std	Z+6, r19	; 0x06
 478:	25 83       	std	Z+5, r18	; 0x05
 47a:	8c ed       	ldi	r24, 0xDC	; 220
 47c:	95 e0       	ldi	r25, 0x05	; 5
 47e:	96 87       	std	Z+14, r25	; 0x0e
 480:	85 87       	std	Z+13, r24	; 0x0d
 482:	30 87       	std	Z+8, r19	; 0x08
 484:	27 83       	std	Z+7, r18	; 0x07
 486:	90 8b       	std	Z+16, r25	; 0x10
 488:	87 87       	std	Z+15, r24	; 0x0f
 48a:	32 87       	std	Z+10, r19	; 0x0a
 48c:	21 87       	std	Z+9, r18	; 0x09
 48e:	92 8b       	std	Z+18, r25	; 0x12
 490:	81 8b       	std	Z+17, r24	; 0x11
 492:	34 87       	std	Z+12, r19	; 0x0c
 494:	23 87       	std	Z+11, r18	; 0x0b
 496:	94 8b       	std	Z+20, r25	; 0x14
 498:	83 8b       	std	Z+19, r24	; 0x13
 49a:	cf 01       	movw	r24, r30
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <freeNove_ThreeWeled_init+0x60>
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <freeNove_ThreeWeled_servo>:

bool freeNove_ThreeWeled_servo(freeNove_ThreeWeled_t *freeNoveInst, unsigned char nr, unsigned short value) {
 4a8:	4f 92       	push	r4
 4aa:	5f 92       	push	r5
 4ac:	6f 92       	push	r6
 4ae:	7f 92       	push	r7
 4b0:	af 92       	push	r10
 4b2:	bf 92       	push	r11
 4b4:	cf 92       	push	r12
 4b6:	df 92       	push	r13
 4b8:	ff 92       	push	r15
 4ba:	0f 93       	push	r16
 4bc:	1f 93       	push	r17
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	00 d0       	rcall	.+0      	; 0x4c4 <freeNove_ThreeWeled_servo+0x1c>
 4c4:	1f 92       	push	r1
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	8c 01       	movw	r16, r24
 4cc:	f6 2e       	mov	r15, r22
    if(!freeNoveInst || !freeNoveInst->twiInst || nr > 3)
 4ce:	00 97       	sbiw	r24, 0x00	; 0
 4d0:	c1 f1       	breq	.+112    	; 0x542 <freeNove_ThreeWeled_servo+0x9a>
 4d2:	fc 01       	movw	r30, r24
 4d4:	c2 80       	ldd	r12, Z+2	; 0x02
 4d6:	d3 80       	ldd	r13, Z+3	; 0x03
 4d8:	c1 14       	cp	r12, r1
 4da:	d1 04       	cpc	r13, r1
 4dc:	91 f1       	breq	.+100    	; 0x542 <freeNove_ThreeWeled_servo+0x9a>
 4de:	f3 e0       	ldi	r31, 0x03	; 3
 4e0:	f6 17       	cp	r31, r22
 4e2:	78 f1       	brcs	.+94     	; 0x542 <freeNove_ThreeWeled_servo+0x9a>
        return false;
    unsigned char buff[3];
    unsigned short tmp = numMap(value, 0, 180, freeNoveInst->servoMin[nr], freeNoveInst->servoMax[nr]);
 4e4:	fc 01       	movw	r30, r24
 4e6:	e6 0f       	add	r30, r22
 4e8:	f1 1d       	adc	r31, r1
 4ea:	e6 0f       	add	r30, r22
 4ec:	f1 1d       	adc	r31, r1
 4ee:	25 85       	ldd	r18, Z+13	; 0x0d
 4f0:	36 85       	ldd	r19, Z+14	; 0x0e
 4f2:	a5 80       	ldd	r10, Z+5	; 0x05
 4f4:	b6 80       	ldd	r11, Z+6	; 0x06
#include "freenove_ThreeWeeled.h"

static uint16_t numMap(unsigned short value, unsigned short fromLow, unsigned short fromHigh, unsigned short toLow, unsigned short toHigh) {
	if(value < fromLow) {
		return fromLow;
	} else if(value > fromHigh) {
 4f6:	45 3b       	cpi	r20, 0xB5	; 181
 4f8:	51 05       	cpc	r21, r1
 4fa:	98 f4       	brcc	.+38     	; 0x522 <freeNove_ThreeWeled_servo+0x7a>
		return fromHigh;
	}
	return ((value - fromLow) * 0x10000) / (((fromHigh - fromLow) * 0x10000) / toHigh) + toLow;
 4fc:	2a 01       	movw	r4, r20
 4fe:	61 2c       	mov	r6, r1
 500:	71 2c       	mov	r7, r1
 502:	32 01       	movw	r6, r4
 504:	55 24       	eor	r5, r5
 506:	44 24       	eor	r4, r4
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	84 eb       	ldi	r24, 0xB4	; 180
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	cd d0       	rcall	.+410    	; 0x6b0 <__divmodsi4>
 516:	c3 01       	movw	r24, r6
 518:	b2 01       	movw	r22, r4
 51a:	ca d0       	rcall	.+404    	; 0x6b0 <__divmodsi4>
 51c:	2a 0d       	add	r18, r10
 51e:	3b 1d       	adc	r19, r11
 520:	02 c0       	rjmp	.+4      	; 0x526 <freeNove_ThreeWeled_servo+0x7e>

static uint16_t numMap(unsigned short value, unsigned short fromLow, unsigned short fromHigh, unsigned short toLow, unsigned short toHigh) {
	if(value < fromLow) {
		return fromLow;
	} else if(value > fromHigh) {
		return fromHigh;
 522:	24 eb       	ldi	r18, 0xB4	; 180
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	f8 01       	movw	r30, r16
bool freeNove_ThreeWeled_servo(freeNove_ThreeWeled_t *freeNoveInst, unsigned char nr, unsigned short value) {
    if(!freeNoveInst || !freeNoveInst->twiInst || nr > 3)
        return false;
    unsigned char buff[3];
    unsigned short tmp = numMap(value, 0, 180, freeNoveInst->servoMin[nr], freeNoveInst->servoMax[nr]);
    buff[0] = freeNove_TV_CMD_SERVO1 + nr;
 528:	f9 82       	std	Y+1, r15	; 0x01
    buff[1] = tmp >> 8;
 52a:	3a 83       	std	Y+2, r19	; 0x02
    buff[2] = tmp;
 52c:	2b 83       	std	Y+3, r18	; 0x03
    if(twi_writeBytes(freeNoveInst->twiInst, freeNoveInst->devAddr, buff, 3) < 1)
 52e:	23 e0       	ldi	r18, 0x03	; 3
 530:	ae 01       	movw	r20, r28
 532:	4f 5f       	subi	r20, 0xFF	; 255
 534:	5f 4f       	sbci	r21, 0xFF	; 255
 536:	64 81       	ldd	r22, Z+4	; 0x04
 538:	c6 01       	movw	r24, r12
 53a:	70 df       	rcall	.-288    	; 0x41c <twi_writeBytes>
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	18 16       	cp	r1, r24
 540:	0c f0       	brlt	.+2      	; 0x544 <freeNove_ThreeWeled_servo+0x9c>
	return (freeNove_ThreeWeled_t*)0;
}

bool freeNove_ThreeWeled_servo(freeNove_ThreeWeled_t *freeNoveInst, unsigned char nr, unsigned short value) {
    if(!freeNoveInst || !freeNoveInst->twiInst || nr > 3)
        return false;
 542:	90 e0       	ldi	r25, 0x00	; 0
    buff[1] = tmp >> 8;
    buff[2] = tmp;
    if(twi_writeBytes(freeNoveInst->twiInst, freeNoveInst->devAddr, buff, 3) < 1)
        return false;
    return true;
}
 544:	89 2f       	mov	r24, r25
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	1f 91       	pop	r17
 552:	0f 91       	pop	r16
 554:	ff 90       	pop	r15
 556:	df 90       	pop	r13
 558:	cf 90       	pop	r12
 55a:	bf 90       	pop	r11
 55c:	af 90       	pop	r10
 55e:	7f 90       	pop	r7
 560:	6f 90       	pop	r6
 562:	5f 90       	pop	r5
 564:	4f 90       	pop	r4
 566:	08 95       	ret

00000568 <main>:
dir_e direction = LEFT;
int16_t position = 90;

int main(void)
{
	spi.spcr = &SPCR;
 568:	8c e4       	ldi	r24, 0x4C	; 76
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	90 93 21 05 	sts	0x0521, r25	; 0x800521 <spi+0x1>
 570:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <spi>
	spi.spsr = &SPSR;
 574:	8d e4       	ldi	r24, 0x4D	; 77
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <spi+0x3>
 57c:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <spi+0x2>
	spi.spdr = &SPDR;
 580:	8e e4       	ldi	r24, 0x4E	; 78
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <spi+0x5>
 588:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <spi+0x4>
	spi_init(&spi);
 58c:	80 e2       	ldi	r24, 0x20	; 32
 58e:	95 e0       	ldi	r25, 0x05	; 5
 590:	57 de       	rcall	.-850    	; 0x240 <spi_init>
	/*twi.twbr = &TWBR;
	twi.twcr = &TWCR;
	twi.twsr = &TWSR;
	twi.twdr = &TWDR;
	twi.twar = &TWAR;*/
	twi.ctrla = &(*(uint8_t *)0xb8);
 592:	88 eb       	ldi	r24, 0xB8	; 184
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	90 93 27 05 	sts	0x0527, r25	; 0x800527 <twi+0x1>
 59a:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <twi>
	twi.ctrlb = &(*(uint8_t *)0xb9);
 59e:	89 eb       	ldi	r24, 0xB9	; 185
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <twi+0x3>
 5a6:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <twi+0x2>
	twi.ctrlc = &(*(uint8_t *)0xba);
 5aa:	8a eb       	ldi	r24, 0xBA	; 186
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	90 93 2b 05 	sts	0x052B, r25	; 0x80052b <twi+0x5>
 5b2:	80 93 2a 05 	sts	0x052A, r24	; 0x80052a <twi+0x4>
	twi.status = &(*(uint8_t *)0xbb);
 5b6:	8b eb       	ldi	r24, 0xBB	; 187
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	90 93 2d 05 	sts	0x052D, r25	; 0x80052d <twi+0x7>
 5be:	80 93 2c 05 	sts	0x052C, r24	; 0x80052c <twi+0x6>
	twi.baud = &(*(uint8_t *)0xbc);
 5c2:	8c eb       	ldi	r24, 0xBC	; 188
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <twi+0x9>
 5ca:	80 93 2e 05 	sts	0x052E, r24	; 0x80052e <twi+0x8>
	twi.data = &(*(uint8_t *)0xbd);
 5ce:	8d eb       	ldi	r24, 0xBD	; 189
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	90 93 31 05 	sts	0x0531, r25	; 0x800531 <twi+0xb>
 5d6:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <twi+0xa>
	twi_init(&twi, 100000);
 5da:	40 ea       	ldi	r20, 0xA0	; 160
 5dc:	56 e8       	ldi	r21, 0x86	; 134
 5de:	61 e0       	ldi	r22, 0x01	; 1
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	86 e2       	ldi	r24, 0x26	; 38
 5e4:	95 e0       	ldi	r25, 0x05	; 5
 5e6:	fa de       	rcall	.-524    	; 0x3dc <twi_init>
	
	freeNoveInst = freeNove_ThreeWeled_init(&twi);
 5e8:	86 e2       	ldi	r24, 0x26	; 38
 5ea:	95 e0       	ldi	r25, 0x05	; 5
 5ec:	2a df       	rcall	.-428    	; 0x442 <freeNove_ThreeWeled_init>
 5ee:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <freeNoveInst+0x1>
 5f2:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <freeNoveInst>
	
	

	DISPLAY_FUNC_INIT(&spi, screen_buf);
 5f6:	6a e0       	ldi	r22, 0x0A	; 10
 5f8:	71 e0       	ldi	r23, 0x01	; 1
 5fa:	80 e2       	ldi	r24, 0x20	; 32
 5fc:	95 e0       	ldi	r25, 0x05	; 5
 5fe:	d2 dd       	rcall	.-1116   	; 0x1a4 <ssd1306_init>
				position = 0;
			}
		} else {
			position+=SERVO_SENSOR_STEP;
			if(position > 179 - SERVO_SENSOR_STEP) {
				direction = LEFT;
 600:	c2 e0       	ldi	r28, 0x02	; 2
				position = 179;
 602:	03 eb       	ldi	r16, 0xB3	; 179
		DISPLAY_FUNC_REFRESH(&spi, screen_buf);*/
		
		if(direction == LEFT) {
			position-=SERVO_SENSOR_STEP;
			if(position < SERVO_SENSOR_STEP ) {
				direction = RIGHT;
 604:	10 e0       	ldi	r17, 0x00	; 0
			}
			DISPLAY_FUNC_CLEAR(&spi, screen_buf, Clr32Black);
			lib_3ds_draw_triangle_i(&spi, NULL, screen_buf, &Points_i, 64, 32, angle_x, angle_y, angle_z, Clr32White);
			DISPLAY_FUNC_REFRESH(&spi, screen_buf);
		}*/
		delay_ms(160);
 606:	d3 e0       	ldi	r29, 0x03	; 3
 608:	80 ea       	ldi	r24, 0xA0	; 160
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	6b dd       	rcall	.-1322   	; 0xe4 <delay_ms>
			angle_y = 0;
		DISPLAY_FUNC_CLEAR(&spi, screen_buf, Clr32Black);
		lib_3ds_draw_triangle_i(&spi, NULL, screen_buf, &Points_i, 64, 32, angle_x, angle_y, angle_z, Clr32White);
		DISPLAY_FUNC_REFRESH(&spi, screen_buf);*/
		
		if(direction == LEFT) {
 60e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <direction>
 612:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <position>
 616:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <position+0x1>
 61a:	22 30       	cpi	r18, 0x02	; 2
 61c:	71 f4       	brne	.+28     	; 0x63a <main+0xd2>
			position-=SERVO_SENSOR_STEP;
 61e:	40 97       	sbiw	r24, 0x10	; 16
 620:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <position+0x1>
 624:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <position>
			if(position < SERVO_SENSOR_STEP ) {
 628:	40 97       	sbiw	r24, 0x10	; 16
 62a:	ac f4       	brge	.+42     	; 0x656 <main+0xee>
				direction = RIGHT;
 62c:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <direction>
				position = 0;
 630:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <position+0x1>
 634:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <position>
 638:	0e c0       	rjmp	.+28     	; 0x656 <main+0xee>
			}
		} else {
			position+=SERVO_SENSOR_STEP;
 63a:	40 96       	adiw	r24, 0x10	; 16
 63c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <position+0x1>
 640:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <position>
			if(position > 179 - SERVO_SENSOR_STEP) {
 644:	84 3a       	cpi	r24, 0xA4	; 164
 646:	91 05       	cpc	r25, r1
 648:	34 f0       	brlt	.+12     	; 0x656 <main+0xee>
				direction = LEFT;
 64a:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <direction>
				position = 179;
 64e:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <position+0x1>
 652:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <position>
			}
		}
		freeNove_ThreeWeled_servo(freeNoveInst, 0, position);
 656:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <position>
 65a:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <position+0x1>
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <freeNoveInst>
 664:	90 91 1f 05 	lds	r25, 0x051F	; 0x80051f <freeNoveInst+0x1>
 668:	1f df       	rcall	.-450    	; 0x4a8 <freeNove_ThreeWeled_servo>
    }
 66a:	ce cf       	rjmp	.-100    	; 0x608 <main+0xa0>

0000066c <__udivmodsi4>:
 66c:	a1 e2       	ldi	r26, 0x21	; 33
 66e:	1a 2e       	mov	r1, r26
 670:	aa 1b       	sub	r26, r26
 672:	bb 1b       	sub	r27, r27
 674:	fd 01       	movw	r30, r26
 676:	0d c0       	rjmp	.+26     	; 0x692 <__udivmodsi4_ep>

00000678 <__udivmodsi4_loop>:
 678:	aa 1f       	adc	r26, r26
 67a:	bb 1f       	adc	r27, r27
 67c:	ee 1f       	adc	r30, r30
 67e:	ff 1f       	adc	r31, r31
 680:	a2 17       	cp	r26, r18
 682:	b3 07       	cpc	r27, r19
 684:	e4 07       	cpc	r30, r20
 686:	f5 07       	cpc	r31, r21
 688:	20 f0       	brcs	.+8      	; 0x692 <__udivmodsi4_ep>
 68a:	a2 1b       	sub	r26, r18
 68c:	b3 0b       	sbc	r27, r19
 68e:	e4 0b       	sbc	r30, r20
 690:	f5 0b       	sbc	r31, r21

00000692 <__udivmodsi4_ep>:
 692:	66 1f       	adc	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	88 1f       	adc	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	1a 94       	dec	r1
 69c:	69 f7       	brne	.-38     	; 0x678 <__udivmodsi4_loop>
 69e:	60 95       	com	r22
 6a0:	70 95       	com	r23
 6a2:	80 95       	com	r24
 6a4:	90 95       	com	r25
 6a6:	9b 01       	movw	r18, r22
 6a8:	ac 01       	movw	r20, r24
 6aa:	bd 01       	movw	r22, r26
 6ac:	cf 01       	movw	r24, r30
 6ae:	08 95       	ret

000006b0 <__divmodsi4>:
 6b0:	05 2e       	mov	r0, r21
 6b2:	97 fb       	bst	r25, 7
 6b4:	16 f4       	brtc	.+4      	; 0x6ba <__divmodsi4+0xa>
 6b6:	00 94       	com	r0
 6b8:	0f d0       	rcall	.+30     	; 0x6d8 <__negsi2>
 6ba:	57 fd       	sbrc	r21, 7
 6bc:	05 d0       	rcall	.+10     	; 0x6c8 <__divmodsi4_neg2>
 6be:	d6 df       	rcall	.-84     	; 0x66c <__udivmodsi4>
 6c0:	07 fc       	sbrc	r0, 7
 6c2:	02 d0       	rcall	.+4      	; 0x6c8 <__divmodsi4_neg2>
 6c4:	46 f4       	brtc	.+16     	; 0x6d6 <__divmodsi4_exit>
 6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <__negsi2>

000006c8 <__divmodsi4_neg2>:
 6c8:	50 95       	com	r21
 6ca:	40 95       	com	r20
 6cc:	30 95       	com	r19
 6ce:	21 95       	neg	r18
 6d0:	3f 4f       	sbci	r19, 0xFF	; 255
 6d2:	4f 4f       	sbci	r20, 0xFF	; 255
 6d4:	5f 4f       	sbci	r21, 0xFF	; 255

000006d6 <__divmodsi4_exit>:
 6d6:	08 95       	ret

000006d8 <__negsi2>:
 6d8:	90 95       	com	r25
 6da:	80 95       	com	r24
 6dc:	70 95       	com	r23
 6de:	61 95       	neg	r22
 6e0:	7f 4f       	sbci	r23, 0xFF	; 255
 6e2:	8f 4f       	sbci	r24, 0xFF	; 255
 6e4:	9f 4f       	sbci	r25, 0xFF	; 255
 6e6:	08 95       	ret

000006e8 <__umulhisi3>:
 6e8:	a2 9f       	mul	r26, r18
 6ea:	b0 01       	movw	r22, r0
 6ec:	b3 9f       	mul	r27, r19
 6ee:	c0 01       	movw	r24, r0
 6f0:	a3 9f       	mul	r26, r19
 6f2:	70 0d       	add	r23, r0
 6f4:	81 1d       	adc	r24, r1
 6f6:	11 24       	eor	r1, r1
 6f8:	91 1d       	adc	r25, r1
 6fa:	b2 9f       	mul	r27, r18
 6fc:	70 0d       	add	r23, r0
 6fe:	81 1d       	adc	r24, r1
 700:	11 24       	eor	r1, r1
 702:	91 1d       	adc	r25, r1
 704:	08 95       	ret

00000706 <__prologue_saves__>:
 706:	2f 92       	push	r2
 708:	3f 92       	push	r3
 70a:	4f 92       	push	r4
 70c:	5f 92       	push	r5
 70e:	6f 92       	push	r6
 710:	7f 92       	push	r7
 712:	8f 92       	push	r8
 714:	9f 92       	push	r9
 716:	af 92       	push	r10
 718:	bf 92       	push	r11
 71a:	cf 92       	push	r12
 71c:	df 92       	push	r13
 71e:	ef 92       	push	r14
 720:	ff 92       	push	r15
 722:	0f 93       	push	r16
 724:	1f 93       	push	r17
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
 72e:	ca 1b       	sub	r28, r26
 730:	db 0b       	sbc	r29, r27
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	f8 94       	cli
 736:	de bf       	out	0x3e, r29	; 62
 738:	0f be       	out	0x3f, r0	; 63
 73a:	cd bf       	out	0x3d, r28	; 61
 73c:	09 94       	ijmp

0000073e <__epilogue_restores__>:
 73e:	2a 88       	ldd	r2, Y+18	; 0x12
 740:	39 88       	ldd	r3, Y+17	; 0x11
 742:	48 88       	ldd	r4, Y+16	; 0x10
 744:	5f 84       	ldd	r5, Y+15	; 0x0f
 746:	6e 84       	ldd	r6, Y+14	; 0x0e
 748:	7d 84       	ldd	r7, Y+13	; 0x0d
 74a:	8c 84       	ldd	r8, Y+12	; 0x0c
 74c:	9b 84       	ldd	r9, Y+11	; 0x0b
 74e:	aa 84       	ldd	r10, Y+10	; 0x0a
 750:	b9 84       	ldd	r11, Y+9	; 0x09
 752:	c8 84       	ldd	r12, Y+8	; 0x08
 754:	df 80       	ldd	r13, Y+7	; 0x07
 756:	ee 80       	ldd	r14, Y+6	; 0x06
 758:	fd 80       	ldd	r15, Y+5	; 0x05
 75a:	0c 81       	ldd	r16, Y+4	; 0x04
 75c:	1b 81       	ldd	r17, Y+3	; 0x03
 75e:	aa 81       	ldd	r26, Y+2	; 0x02
 760:	b9 81       	ldd	r27, Y+1	; 0x01
 762:	ce 0f       	add	r28, r30
 764:	d1 1d       	adc	r29, r1
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	f8 94       	cli
 76a:	de bf       	out	0x3e, r29	; 62
 76c:	0f be       	out	0x3f, r0	; 63
 76e:	cd bf       	out	0x3d, r28	; 61
 770:	ed 01       	movw	r28, r26
 772:	08 95       	ret

00000774 <calloc>:
 774:	0f 93       	push	r16
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	df 93       	push	r29
 77c:	86 9f       	mul	r24, r22
 77e:	80 01       	movw	r16, r0
 780:	87 9f       	mul	r24, r23
 782:	10 0d       	add	r17, r0
 784:	96 9f       	mul	r25, r22
 786:	10 0d       	add	r17, r0
 788:	11 24       	eor	r1, r1
 78a:	c8 01       	movw	r24, r16
 78c:	0d d0       	rcall	.+26     	; 0x7a8 <malloc>
 78e:	ec 01       	movw	r28, r24
 790:	00 97       	sbiw	r24, 0x00	; 0
 792:	21 f0       	breq	.+8      	; 0x79c <calloc+0x28>
 794:	a8 01       	movw	r20, r16
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	27 d1       	rcall	.+590    	; 0x9ea <memset>
 79c:	ce 01       	movw	r24, r28
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	1f 91       	pop	r17
 7a4:	0f 91       	pop	r16
 7a6:	08 95       	ret

000007a8 <malloc>:
 7a8:	0f 93       	push	r16
 7aa:	1f 93       	push	r17
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
 7b0:	82 30       	cpi	r24, 0x02	; 2
 7b2:	91 05       	cpc	r25, r1
 7b4:	10 f4       	brcc	.+4      	; 0x7ba <malloc+0x12>
 7b6:	82 e0       	ldi	r24, 0x02	; 2
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	e0 91 34 05 	lds	r30, 0x0534	; 0x800534 <__flp>
 7be:	f0 91 35 05 	lds	r31, 0x0535	; 0x800535 <__flp+0x1>
 7c2:	20 e0       	ldi	r18, 0x00	; 0
 7c4:	30 e0       	ldi	r19, 0x00	; 0
 7c6:	a0 e0       	ldi	r26, 0x00	; 0
 7c8:	b0 e0       	ldi	r27, 0x00	; 0
 7ca:	30 97       	sbiw	r30, 0x00	; 0
 7cc:	19 f1       	breq	.+70     	; 0x814 <malloc+0x6c>
 7ce:	40 81       	ld	r20, Z
 7d0:	51 81       	ldd	r21, Z+1	; 0x01
 7d2:	02 81       	ldd	r16, Z+2	; 0x02
 7d4:	13 81       	ldd	r17, Z+3	; 0x03
 7d6:	48 17       	cp	r20, r24
 7d8:	59 07       	cpc	r21, r25
 7da:	c8 f0       	brcs	.+50     	; 0x80e <malloc+0x66>
 7dc:	84 17       	cp	r24, r20
 7de:	95 07       	cpc	r25, r21
 7e0:	69 f4       	brne	.+26     	; 0x7fc <malloc+0x54>
 7e2:	10 97       	sbiw	r26, 0x00	; 0
 7e4:	31 f0       	breq	.+12     	; 0x7f2 <malloc+0x4a>
 7e6:	12 96       	adiw	r26, 0x02	; 2
 7e8:	0c 93       	st	X, r16
 7ea:	12 97       	sbiw	r26, 0x02	; 2
 7ec:	13 96       	adiw	r26, 0x03	; 3
 7ee:	1c 93       	st	X, r17
 7f0:	27 c0       	rjmp	.+78     	; 0x840 <malloc+0x98>
 7f2:	00 93 34 05 	sts	0x0534, r16	; 0x800534 <__flp>
 7f6:	10 93 35 05 	sts	0x0535, r17	; 0x800535 <__flp+0x1>
 7fa:	22 c0       	rjmp	.+68     	; 0x840 <malloc+0x98>
 7fc:	21 15       	cp	r18, r1
 7fe:	31 05       	cpc	r19, r1
 800:	19 f0       	breq	.+6      	; 0x808 <malloc+0x60>
 802:	42 17       	cp	r20, r18
 804:	53 07       	cpc	r21, r19
 806:	18 f4       	brcc	.+6      	; 0x80e <malloc+0x66>
 808:	9a 01       	movw	r18, r20
 80a:	bd 01       	movw	r22, r26
 80c:	ef 01       	movw	r28, r30
 80e:	df 01       	movw	r26, r30
 810:	f8 01       	movw	r30, r16
 812:	db cf       	rjmp	.-74     	; 0x7ca <malloc+0x22>
 814:	21 15       	cp	r18, r1
 816:	31 05       	cpc	r19, r1
 818:	f9 f0       	breq	.+62     	; 0x858 <malloc+0xb0>
 81a:	28 1b       	sub	r18, r24
 81c:	39 0b       	sbc	r19, r25
 81e:	24 30       	cpi	r18, 0x04	; 4
 820:	31 05       	cpc	r19, r1
 822:	80 f4       	brcc	.+32     	; 0x844 <malloc+0x9c>
 824:	8a 81       	ldd	r24, Y+2	; 0x02
 826:	9b 81       	ldd	r25, Y+3	; 0x03
 828:	61 15       	cp	r22, r1
 82a:	71 05       	cpc	r23, r1
 82c:	21 f0       	breq	.+8      	; 0x836 <malloc+0x8e>
 82e:	fb 01       	movw	r30, r22
 830:	93 83       	std	Z+3, r25	; 0x03
 832:	82 83       	std	Z+2, r24	; 0x02
 834:	04 c0       	rjmp	.+8      	; 0x83e <malloc+0x96>
 836:	90 93 35 05 	sts	0x0535, r25	; 0x800535 <__flp+0x1>
 83a:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <__flp>
 83e:	fe 01       	movw	r30, r28
 840:	32 96       	adiw	r30, 0x02	; 2
 842:	44 c0       	rjmp	.+136    	; 0x8cc <malloc+0x124>
 844:	fe 01       	movw	r30, r28
 846:	e2 0f       	add	r30, r18
 848:	f3 1f       	adc	r31, r19
 84a:	81 93       	st	Z+, r24
 84c:	91 93       	st	Z+, r25
 84e:	22 50       	subi	r18, 0x02	; 2
 850:	31 09       	sbc	r19, r1
 852:	39 83       	std	Y+1, r19	; 0x01
 854:	28 83       	st	Y, r18
 856:	3a c0       	rjmp	.+116    	; 0x8cc <malloc+0x124>
 858:	20 91 32 05 	lds	r18, 0x0532	; 0x800532 <__brkval>
 85c:	30 91 33 05 	lds	r19, 0x0533	; 0x800533 <__brkval+0x1>
 860:	23 2b       	or	r18, r19
 862:	41 f4       	brne	.+16     	; 0x874 <malloc+0xcc>
 864:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 868:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 86c:	30 93 33 05 	sts	0x0533, r19	; 0x800533 <__brkval+0x1>
 870:	20 93 32 05 	sts	0x0532, r18	; 0x800532 <__brkval>
 874:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 878:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 87c:	21 15       	cp	r18, r1
 87e:	31 05       	cpc	r19, r1
 880:	41 f4       	brne	.+16     	; 0x892 <malloc+0xea>
 882:	2d b7       	in	r18, 0x3d	; 61
 884:	3e b7       	in	r19, 0x3e	; 62
 886:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 88a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 88e:	24 1b       	sub	r18, r20
 890:	35 0b       	sbc	r19, r21
 892:	e0 91 32 05 	lds	r30, 0x0532	; 0x800532 <__brkval>
 896:	f0 91 33 05 	lds	r31, 0x0533	; 0x800533 <__brkval+0x1>
 89a:	e2 17       	cp	r30, r18
 89c:	f3 07       	cpc	r31, r19
 89e:	a0 f4       	brcc	.+40     	; 0x8c8 <malloc+0x120>
 8a0:	2e 1b       	sub	r18, r30
 8a2:	3f 0b       	sbc	r19, r31
 8a4:	28 17       	cp	r18, r24
 8a6:	39 07       	cpc	r19, r25
 8a8:	78 f0       	brcs	.+30     	; 0x8c8 <malloc+0x120>
 8aa:	ac 01       	movw	r20, r24
 8ac:	4e 5f       	subi	r20, 0xFE	; 254
 8ae:	5f 4f       	sbci	r21, 0xFF	; 255
 8b0:	24 17       	cp	r18, r20
 8b2:	35 07       	cpc	r19, r21
 8b4:	48 f0       	brcs	.+18     	; 0x8c8 <malloc+0x120>
 8b6:	4e 0f       	add	r20, r30
 8b8:	5f 1f       	adc	r21, r31
 8ba:	50 93 33 05 	sts	0x0533, r21	; 0x800533 <__brkval+0x1>
 8be:	40 93 32 05 	sts	0x0532, r20	; 0x800532 <__brkval>
 8c2:	81 93       	st	Z+, r24
 8c4:	91 93       	st	Z+, r25
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <malloc+0x124>
 8c8:	e0 e0       	ldi	r30, 0x00	; 0
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	cf 01       	movw	r24, r30
 8ce:	df 91       	pop	r29
 8d0:	cf 91       	pop	r28
 8d2:	1f 91       	pop	r17
 8d4:	0f 91       	pop	r16
 8d6:	08 95       	ret

000008d8 <free>:
 8d8:	cf 93       	push	r28
 8da:	df 93       	push	r29
 8dc:	00 97       	sbiw	r24, 0x00	; 0
 8de:	09 f4       	brne	.+2      	; 0x8e2 <free+0xa>
 8e0:	81 c0       	rjmp	.+258    	; 0x9e4 <free+0x10c>
 8e2:	fc 01       	movw	r30, r24
 8e4:	32 97       	sbiw	r30, 0x02	; 2
 8e6:	13 82       	std	Z+3, r1	; 0x03
 8e8:	12 82       	std	Z+2, r1	; 0x02
 8ea:	a0 91 34 05 	lds	r26, 0x0534	; 0x800534 <__flp>
 8ee:	b0 91 35 05 	lds	r27, 0x0535	; 0x800535 <__flp+0x1>
 8f2:	10 97       	sbiw	r26, 0x00	; 0
 8f4:	81 f4       	brne	.+32     	; 0x916 <free+0x3e>
 8f6:	20 81       	ld	r18, Z
 8f8:	31 81       	ldd	r19, Z+1	; 0x01
 8fa:	82 0f       	add	r24, r18
 8fc:	93 1f       	adc	r25, r19
 8fe:	20 91 32 05 	lds	r18, 0x0532	; 0x800532 <__brkval>
 902:	30 91 33 05 	lds	r19, 0x0533	; 0x800533 <__brkval+0x1>
 906:	28 17       	cp	r18, r24
 908:	39 07       	cpc	r19, r25
 90a:	51 f5       	brne	.+84     	; 0x960 <free+0x88>
 90c:	f0 93 33 05 	sts	0x0533, r31	; 0x800533 <__brkval+0x1>
 910:	e0 93 32 05 	sts	0x0532, r30	; 0x800532 <__brkval>
 914:	67 c0       	rjmp	.+206    	; 0x9e4 <free+0x10c>
 916:	ed 01       	movw	r28, r26
 918:	20 e0       	ldi	r18, 0x00	; 0
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	ce 17       	cp	r28, r30
 91e:	df 07       	cpc	r29, r31
 920:	40 f4       	brcc	.+16     	; 0x932 <free+0x5a>
 922:	4a 81       	ldd	r20, Y+2	; 0x02
 924:	5b 81       	ldd	r21, Y+3	; 0x03
 926:	9e 01       	movw	r18, r28
 928:	41 15       	cp	r20, r1
 92a:	51 05       	cpc	r21, r1
 92c:	f1 f0       	breq	.+60     	; 0x96a <free+0x92>
 92e:	ea 01       	movw	r28, r20
 930:	f5 cf       	rjmp	.-22     	; 0x91c <free+0x44>
 932:	d3 83       	std	Z+3, r29	; 0x03
 934:	c2 83       	std	Z+2, r28	; 0x02
 936:	40 81       	ld	r20, Z
 938:	51 81       	ldd	r21, Z+1	; 0x01
 93a:	84 0f       	add	r24, r20
 93c:	95 1f       	adc	r25, r21
 93e:	c8 17       	cp	r28, r24
 940:	d9 07       	cpc	r29, r25
 942:	59 f4       	brne	.+22     	; 0x95a <free+0x82>
 944:	88 81       	ld	r24, Y
 946:	99 81       	ldd	r25, Y+1	; 0x01
 948:	84 0f       	add	r24, r20
 94a:	95 1f       	adc	r25, r21
 94c:	02 96       	adiw	r24, 0x02	; 2
 94e:	91 83       	std	Z+1, r25	; 0x01
 950:	80 83       	st	Z, r24
 952:	8a 81       	ldd	r24, Y+2	; 0x02
 954:	9b 81       	ldd	r25, Y+3	; 0x03
 956:	93 83       	std	Z+3, r25	; 0x03
 958:	82 83       	std	Z+2, r24	; 0x02
 95a:	21 15       	cp	r18, r1
 95c:	31 05       	cpc	r19, r1
 95e:	29 f4       	brne	.+10     	; 0x96a <free+0x92>
 960:	f0 93 35 05 	sts	0x0535, r31	; 0x800535 <__flp+0x1>
 964:	e0 93 34 05 	sts	0x0534, r30	; 0x800534 <__flp>
 968:	3d c0       	rjmp	.+122    	; 0x9e4 <free+0x10c>
 96a:	e9 01       	movw	r28, r18
 96c:	fb 83       	std	Y+3, r31	; 0x03
 96e:	ea 83       	std	Y+2, r30	; 0x02
 970:	49 91       	ld	r20, Y+
 972:	59 91       	ld	r21, Y+
 974:	c4 0f       	add	r28, r20
 976:	d5 1f       	adc	r29, r21
 978:	ec 17       	cp	r30, r28
 97a:	fd 07       	cpc	r31, r29
 97c:	61 f4       	brne	.+24     	; 0x996 <free+0xbe>
 97e:	80 81       	ld	r24, Z
 980:	91 81       	ldd	r25, Z+1	; 0x01
 982:	84 0f       	add	r24, r20
 984:	95 1f       	adc	r25, r21
 986:	02 96       	adiw	r24, 0x02	; 2
 988:	e9 01       	movw	r28, r18
 98a:	99 83       	std	Y+1, r25	; 0x01
 98c:	88 83       	st	Y, r24
 98e:	82 81       	ldd	r24, Z+2	; 0x02
 990:	93 81       	ldd	r25, Z+3	; 0x03
 992:	9b 83       	std	Y+3, r25	; 0x03
 994:	8a 83       	std	Y+2, r24	; 0x02
 996:	e0 e0       	ldi	r30, 0x00	; 0
 998:	f0 e0       	ldi	r31, 0x00	; 0
 99a:	12 96       	adiw	r26, 0x02	; 2
 99c:	8d 91       	ld	r24, X+
 99e:	9c 91       	ld	r25, X
 9a0:	13 97       	sbiw	r26, 0x03	; 3
 9a2:	00 97       	sbiw	r24, 0x00	; 0
 9a4:	19 f0       	breq	.+6      	; 0x9ac <free+0xd4>
 9a6:	fd 01       	movw	r30, r26
 9a8:	dc 01       	movw	r26, r24
 9aa:	f7 cf       	rjmp	.-18     	; 0x99a <free+0xc2>
 9ac:	8d 91       	ld	r24, X+
 9ae:	9c 91       	ld	r25, X
 9b0:	11 97       	sbiw	r26, 0x01	; 1
 9b2:	9d 01       	movw	r18, r26
 9b4:	2e 5f       	subi	r18, 0xFE	; 254
 9b6:	3f 4f       	sbci	r19, 0xFF	; 255
 9b8:	82 0f       	add	r24, r18
 9ba:	93 1f       	adc	r25, r19
 9bc:	20 91 32 05 	lds	r18, 0x0532	; 0x800532 <__brkval>
 9c0:	30 91 33 05 	lds	r19, 0x0533	; 0x800533 <__brkval+0x1>
 9c4:	28 17       	cp	r18, r24
 9c6:	39 07       	cpc	r19, r25
 9c8:	69 f4       	brne	.+26     	; 0x9e4 <free+0x10c>
 9ca:	30 97       	sbiw	r30, 0x00	; 0
 9cc:	29 f4       	brne	.+10     	; 0x9d8 <free+0x100>
 9ce:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <__flp+0x1>
 9d2:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <__flp>
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <free+0x104>
 9d8:	13 82       	std	Z+3, r1	; 0x03
 9da:	12 82       	std	Z+2, r1	; 0x02
 9dc:	b0 93 33 05 	sts	0x0533, r27	; 0x800533 <__brkval+0x1>
 9e0:	a0 93 32 05 	sts	0x0532, r26	; 0x800532 <__brkval>
 9e4:	df 91       	pop	r29
 9e6:	cf 91       	pop	r28
 9e8:	08 95       	ret

000009ea <memset>:
 9ea:	dc 01       	movw	r26, r24
 9ec:	01 c0       	rjmp	.+2      	; 0x9f0 <memset+0x6>
 9ee:	6d 93       	st	X+, r22
 9f0:	41 50       	subi	r20, 0x01	; 1
 9f2:	50 40       	sbci	r21, 0x00	; 0
 9f4:	e0 f7       	brcc	.-8      	; 0x9ee <memset+0x4>
 9f6:	08 95       	ret

000009f8 <_exit>:
 9f8:	f8 94       	cli

000009fa <__stop_program>:
 9fa:	ff cf       	rjmp	.-2      	; 0x9fa <__stop_program>
